<script>
  var _thisForm = '';
  $(document).ready(function() {
    $('.sel2').select2({
      formatNoMatches: function(m) { return '<%= I18n.t("select2.no_matches") %>'; }
    });

    // Initialized form variable
    _thisForm = $("#stock_initial").closest('form')[0];
  });

  jQuery(function($) {
    // when the #stock_initial field changes
    $("#stock_initial").change(function() {
      var num = $('#stock_initial').val();
      if (num == "")
        num = "0";
      // Right formatted for passing as REST parameter
      num = right_number(num, 4) * 10000;
      jQuery.getJSON('st_format_numbers/' + num, function(data) {
        $('#stock_initial').val(data.num);
      });
      return false;
    });

    // when the #stock_minimum field changes
    $("#stock_initial").change(function() {
      var num = $('#stock_minimum').val();
      if (num == "")
        num = "0";
      // Right formatted for passing as REST parameter
      num = right_number(num, 4) * 10000;
      jQuery.getJSON('st_format_numbers/' + num, function(data) {
        $('#stock_minimum').val(data.num);
      });
      return false;
    });

    // when the #stock_current field changes
    $("#stock_initial").change(function() {
      var num = $('#stock_current').val();
      if (num == "")
        num = "0";
      // Right formatted for passing as REST parameter
      num = right_number(num, 4) * 10000;
      jQuery.getJSON('st_format_numbers/' + num, function(data) {
        $('#stock_current').val(data.num);
      });
      return false;
    });

    // when submit    
    $(_thisForm).on('submit', function() {
      // Must change decimal separator, if comma, in numeric fields
      var i = $('#stock_initial').val().replace(",", ".");
      var m = $('#stock_minimum').val().replace(",", ".");
      var c = $('#stock_current').val().replace(",", ".");
      $('#stock_initial').val(i);
      $('#stock_minimum').val(m);
      $('#stock_current').val(c);
    });
  });  
</script>

<%= simple_form_for @stock, :html => {:class => 'form-vertical well' } do |f| %>
<%= f.error_notification %>
<%= display_base_errors resource %>
<% if @product %>
<%= f.association :product, autofocus: true, collection: Product.where("id = ?", "#{@product.id}").all, input_html: { class: 'x-large-text-field' }, label_html: { class: 'form-label' }, include_blank: false %>
<% else %>
<%= f.association :product, autofocus: true, collection: Product.all(order: 'main_description'), input_html: { class: 'x-large-text-field sel2' }, label_html: { class: 'form-label' } %>
<% end %>
<% if @store %>
<%= f.association :store, collection: Store.where("id = ?", "#{@store.id}").all, input_html: { class: 'x-large-text-field' }, label_html: { class: 'form-label' }, include_blank: false %>
<% else %>
<%= f.association :store, collection: Store.all(order: 'name'), input_html: { class: 'x-large-text-field sel2' }, label_html: { class: 'form-label' } %>
<% end %>
<div>
  <label class="multi-field-label-two"> <%= f.input :initial, as: :string, input_html: { value: (number_with_precision(f.object.initial, precision: 4) if f.object.initial), class: 'large-text-field number-text-field' }, label_html: { class: 'form-label' } %> </label>
  <label class="multi-field-label-two"> <%= f.input :minimum, as: :string, input_html: { value: (number_with_precision(f.object.minimum, precision: 4) if f.object.minimum), class: 'large-text-field number-text-field' }, label_html: { class: 'form-label' } %> </label>
</div>
<div>
  <label class="multi-field-label-two"> <%= f.input :current, as: :string, input_html: { value: (number_with_precision(f.object.current, precision: 4) if f.object.current), class: 'large-text-field number-text-field' }, label_html: { class: 'form-label' } %> </label>
  <label class="multi-field-label-two"> <%= f.input :location, input_html: { class: 'x-large-text-field' }, label_html: { class: 'form-label' } %> </label>
</div>
<%= f.button :submit, :class => 'btn-primary' %>
<% end %>

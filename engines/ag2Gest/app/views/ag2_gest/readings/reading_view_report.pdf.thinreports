if @reading_report.blank?
  return
end

# Localization for numbers
delimiter = I18n.locale == :es ? "." : ","

report.set_layout tlf: 'reports/reading_apaisado', layout_options: { default: true }

#
# Report events
#
# On page create
report.events.on :page_create do |e|
  # Set page-number
  e.page.item(:page_no).value(e.page.no)
end
# On report generate
report.events.on :generate do |e|
  e.pages.each do |page|
    # Set total-page-number
    page.item(:page_count).value(e.report.page_count)
  end
end

#
# List configuration (stores & events)
#
report.layout.config.list(:default) do |c|
  # Define the variables used in list
  c.use_stores page_rows: 0

  # On list page footer insertion
  c.events.on :page_footer_insert do |e|
    # Display page sutotals
    e.section.item(:sum_rows_title).value(I18n.t("ag2_gest.ag2_gest_track.meter_report.sum_rows_title"))
    e.section.item(:sum_rows).value(e.store.page_rows)
    # Initialize subtotals to 0
    #e.store.page_rows = 0
  end
end

# New page & start
report.start_new_page

# Page header
report.page.values report_title: I18n.t("ag2_gest.readings.index.title")

# Page footer
report.page.values(printed_at: formatted_timestamp(Time.now),
           pt: I18n.t("every_report.pt"),
           pd: I18n.t("every_report.pd"))

# List header name
report.page.list(:default).header do |header|
  header.item(:cod_route).value I18n.t("activerecord.report.pre_reading.reading_route_id")
  header.item(:num_route).value I18n.t("activerecord.report.pre_reading.reading_sequence")
  header.item(:code_sp).value I18n.t("activerecord.attributes.pre_reading.service_point_id_c")
  header.item(:code_subscriber).value I18n.t("activerecord.report.pre_reading.code_subscriber")
  # header.item(:name_subscriber).value I18n.t("activerecord.report.pre_reading.name_subscriber")
  header.item(:delivery_address).value I18n.t("activerecord.report.pre_reading.delivery_address")
  header.item(:meter_header).value I18n.t("activerecord.report.pre_reading.meter_id")
  # header.item(:caliber).value I18n.t("activerecord.report.pre_reading.caliber")
  # header.item(:meter_model).value I18n.t("activerecord.report.pre_reading.meter_model")
  # header.item(:date_install).value I18n.t("activerecord.report.pre_reading.date_install")
  header.item(:period).value I18n.t("activerecord.report.pre_reading.period")
  header.item(:bef_re_year).value I18n.t("activerecord.report.pre_reading.reading_index_2")
  header.item(:bef_re_period).value I18n.t("activerecord.report.pre_reading.reading_index_1")
  header.item(:date_re).value I18n.t("activerecord.report.pre_reading.reading_date")
  header.item(:index_read).value I18n.t("activerecord.report.pre_reading.reading_index")
end


cond = true
#ORDENAR ARRAY
@reading_report.each do |preading|
  reading_date = Reading.where(meter_id: preading.try(:meter_id),reading_type_id: ReadingType::INSTALACION)
  report.page.list(:default).add_row do |row|
    if cond
      row.item(:code_route).value(preading.reading_route.full_code).style(:color, "#6E6E6E")
      row.item(:number_route).value(preading.reading_sequence).style(:color, "#6E6E6E")
      row.item(:subscriber).value(preading.try(:subscriber).try(:full_code)).style(:color, "#6E6E6E")
      row.item(:sp).value(preading.try(:service_point).try(:full_code)).style(:color, "#6E6E6E")

      #NOMBRE Y APELLIDOS CON MAYÚSCULAS (CamelCase)
      #firstname = ""+preading.try(:subscriber).try(:client).try(:entity).try(:first_name)
      #surname = ""+preading.try(:subscriber).try(:client).try(:entity).try(:last_name)
      #new_firstname = firstname.slice(0,1).capitalize + firstname.slice(1..-1)
      #new_surname = surname.slice(0,1).capitalize + surname.slice(1..-1)
      #row.item(:name_subscriber).value("#{new_firstname} #{new_surname}").style(:color, "#6E6E6E")
      # row.item(:name_subscriber).value("#{preading.try(:subscriber).try(:full_name)}").style(:color, "#6E6E6E")
      if !preading.subscriber.blank?
        row.item(:address_subscriber).value(preading.try(:subscriber).try(:address_1)).style(:color, "#6E6E6E")
      else
        row.item(:address_subscriber).value(preading.try(:service_point).try(:address_1)).style(:color, "#6E6E6E")
      end
      # row.item(:address_subscriber).value("#{preading.try(:subscriber).try(:street_directory).try(:street_type).try(:street_type_code)} #{preading.try(:subscriber).try(:street_directory).try(:street_name)}#{','} #{preading.try(:subscriber).try(:street_number)}#{','} #{preading.try(:subscriber).try(:building)}#{','} #{preading.try(:subscriber).try(:floor)}#{','} #{preading.try(:subscriber).try(:floor_office)} #{'('}#{preading.try(:subscriber).try(:zipcode).try(:zipcode)}#{')'} #{preading.try(:subscriber).try(:street_directory).try(:town).try(:name)} ").style(:color, "#6E6E6E")
      row.item(:meter).value(preading.try(:meter).try(:meter_code)).style(:color, "#6E6E6E")
      #row.item(:meter).value(preading.try(:subscriber).try(:meter).try(:meter_code)).style(:color, "#6E6E6E")

      # row.item(:caliber).value(preading.try(:meter).try(:caliber).try(:caliber)).style(:color, "#6E6E6E")
      #row.item(:caliber).value(preading.try(:meter).try(:caliber).try(:caliber)).style(:color, "#6E6E6E")

      # row.item(:model_brand).value("#{preading.try(:meter).try(:meter_model).try(:meter_brand).try(:brand)} #{'/'} #{preading.try(:meter).try(:meter_model).try(:model)}").style(:color, "#6E6E6E")

      #DATE INSTALLATION
      # if !preading.subscriber.blank?
      #   row.item(:date_installation).value(I18n.localize((MeterDetail.find_by_meter_id_and_subscriber_id(preading.try(:subscriber).try(:meter_id), preading.try(:subscriber).try(:id))).try(:installation_date))).style(:color, "#6E6E6E")  # OR row.item(:date_installation).value((MeterDetail.find_by_meter_id_and_subscriber_id(preading.meter_id, preading.subscriber_id)).try(:installation_date)).style(:color, "#6E6E6E")
      # else
      #   row.item(:date_installation).value(formatted_date(reading_date.first.try(:reading_date))).style(:color, "#6E6E6E")# OR row.item(:date_installation).value((MeterDetail.find_by_meter_id_and_subscriber_id(preading.meter_id, preading.subscriber_id)).try(:installation_date)).style(:color, "#6E6E6E")
      # end
      row.item(:period).value(preading.try(:billing_period).try(:period)).style(:color, "#6E6E6E")
      row.item(:read_year).value("#{preading.reading_2.try(:billing_period).try(:period)} #{preading.reading_index_2}").style(:color, "#6E6E6E")
      row.item(:read_period).value("#{preading.reading_1.try(:billing_period).try(:period)} #{preading.reading_index_1}").style(:color, "#6E6E6E")
      row.item(:date).style(:color, "#6E6E6E").value formatted_timestamp(preading.reading_date) unless preading.reading_date.blank?
      row.item(:index).value(preading.try(:reading_index)).style(:color, "#6E6E6E")


      cond = false
    else
      row.item(:code_route).value(preading.reading_route.full_code)
      row.item(:number_route).value(preading.reading_sequence)
      row.item(:subscriber).value(preading.try(:subscriber).try(:full_code))
      row.item(:sp).value(preading.try(:service_point).try(:full_code))

      #NOMBRE Y APELLIDOS CON MAYÚSCULAS (CamelCase)
      #firstname = ""+preading.try(:subscriber).try(:client).try(:entity).try(:first_name)
      #surname = ""+preading.try(:subscriber).try(:client).try(:entity).try(:last_name)
      #new_firstname = firstname.slice(0,1).capitalize + firstname.slice(1..-1)
      #new_surname = surname.slice(0,1).capitalize + surname.slice(1..-1)
      #row.item(:name_subscriber).value("#{new_firstname} #{new_surname}").style(:color, "#6E6E6E")
      # row.item(:name_subscriber).value("#{preading.try(:subscriber).try(:full_name)}")
      if !preading.subscriber.blank?
        row.item(:address_subscriber).value(preading.try(:subscriber).try(:address_1))
      else
        row.item(:address_subscriber).value(preading.try(:service_point).try(:address_1))
      end
      # row.item(:address_subscriber).value("#{preading.try(:subscriber).try(:street_directory).try(:street_type).try(:street_type_code)} #{preading.try(:subscriber).try(:street_directory).try(:street_name)} #{preading.try(:subscriber).try(:street_number)} #{preading.try(:subscriber).try(:building)} #{preading.try(:subscriber).try(:floor)} #{preading.try(:subscriber).try(:floor_office)} #{preading.try(:subscriber).try(:zipcode).try(:zipcode)} #{preading.try(:subscriber).try(:street_directory).try(:town).try(:name)} ")
      row.item(:meter).value(preading.try(:meter).try(:meter_code))
      # row.item(:caliber).value(preading.try(:meter).try(:caliber).try(:caliber))
      # row.item(:model_brand).value("#{preading.try(:meter).try(:meter_model).try(:meter_brand).try(:brand)} #{'/'} #{preading.try(:meter).try(:meter_model).try(:model)}")
      # if !preading.subscriber.blank?
      #   row.item(:date_installation).value(I18n.localize((MeterDetail.find_by_meter_id_and_subscriber_id(preading.try(:subscriber).try(:meter_id), preading.try(:subscriber).try(:id))).try(:installation_date)))
      # else
      #   row.item(:date_installation).value formatted_date(reading_date.first.try(:reading_date))
      # end
      row.item(:period).value(preading.try(:billing_period).try(:period))
      row.item(:read_year).value("#{preading.reading_2.try(:billing_period).try(:period)} #{preading.reading_index_2}")
      row.item(:read_period).value("#{preading.reading_1.try(:billing_period).try(:period)} #{preading.reading_index_1}")
      row.item(:date).value formatted_timestamp(preading.reading_date) unless preading.reading_date.blank?
      row.item(:index).value(preading.try(:reading_index))

      cond = true
    end
  end
  # Store page subtotals
  report.page.list(:default) do |list|
    list.store.page_rows += 1
  end
end

if @invoice_report.blank?
  return
end

# Localization for numbers
delimiter = I18n.locale == :es ? "." : ","

report.set_layout tlf: 'reports/sub_invoices_report', layout_options: { default: true }

#
# Report events
#
# On page create
report.events.on :page_create do |e|
  # Set page-number
  e.page.item(:page_no).value(e.page.no)
end
# On report generate
report.events.on :generate do |e|
  e.pages.each do |page|
    # Set total-page-number
    page.item(:page_count).value(e.report.page_count)
  end
end

#
# List configuration (stores & events)
#
report.layout.config.list(:default) do |c|
  # Define the variables used in list
  c.use_stores page_rows: 0, p_subtotal: 0, p_taxes: 0, p_total: 0, p_total_paid: 0, p_paid: 0, p_debt: 0

  # On list page footer insertion
  c.events.on :page_footer_insert do |e|
    # Display page sutotals
    e.section.item(:sum_rows_title).value(I18n.t("ag2_gest.ag2_gest_track.every_report.cumulative_total"))
    e.section.item(:sum_rows).value(e.store.page_rows)
    e.section.item(:full_subtotal).value number_with_precision(e.store.p_subtotal, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
    e.section.item(:full_taxes).value number_with_precision(e.store.p_taxes, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
    e.section.item(:full_total).value number_with_precision(e.store.p_total, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
    e.section.item(:full_total_paid).value number_with_precision(e.store.p_total_paid, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
    e.section.item(:full_paid).value number_with_precision(e.store.p_paid, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
    e.section.item(:full_debt).value number_with_precision(e.store.p_debt, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
    # Initialize subtotals to 0
    #e.store.page_rows = 0
  end
end

# New page & start
report.start_new_page

# Page header
report.page.values report_title: I18n.t("ag2_gest.invoices.index.title")

# Page footer
report.page.values(printed_at: formatted_timestamp(Time.now),
           pt: I18n.t("every_report.pt"),
           pd: I18n.t("every_report.pd"))


# List header
report.page.list(:default).header do |header|
  header.item(:bill_c).value I18n.t("activerecord.attributes.subscriber.receipt")
  header.item(:code_c).value I18n.t("activerecord.attributes.subscriber.invoice_number")
  header.item(:period_c).value I18n.t("activerecord.attributes.subscriber.period")
  header.item(:date_c).value I18n.t("activerecord.attributes.invoice.invoice_date")
  header.item(:payday_limit_c).value I18n.t("activerecord.attributes.invoice_current_debt.payday_limit")
  header.item(:teo_c).value I18n.t("activerecord.attributes.invoice.codes")
  header.item(:subtotal_c).value I18n.t("activerecord.attributes.invoice.subtotal")
  header.item(:taxes_c).value I18n.t("activerecord.attributes.invoice.taxes")
  header.item(:total_c).value I18n.t("activerecord.attributes.subscriber.total")
  header.item(:total_paid_c).value I18n.t("activerecord.attributes.invoice.receivable_c")
  header.item(:paid_c).value I18n.t("activerecord.attributes.subscriber.charged_c")
  header.item(:debt_c).value I18n.t("activerecord.attributes.subscriber.debt")
end


# Page Title list

# List detail
@invoice_report.each do |i|

  report.page.list(:default).add_row do |row|
    report.page.values client_c: I18n.t("activerecord.attributes.bill.subscriber")+": "
    #data client
      full_subscriber = ""
      full_subscriber += i.bill.subscriber.full_code.to_s
      full_subscriber += full_subscriber.blank? ? i.bill.subscriber.full_name : " - " + i.bill.subscriber.full_name.to_s
      full_subscriber += full_subscriber.blank? ? i.bill.subscriber.address_1 : " - " + i.bill.subscriber.address_1.to_s
    report.page.values client: full_subscriber

  #bill no
    row.item(:bill).value i.bill.invoice_based_old_no_real_no
    row.item(:code).value i.old_no_based_real_no
    row.item(:period).value i.billing_period.period unless i.billing_period.blank?
    row.item(:date).value formatted_date(i.invoice_date) unless i.invoice_date.blank?
    row.item(:payday_limit).value formatted_date(i.payday_limit) unless i.payday_limit.blank?
  #data teo
    full_teo = ""
    if !i.invoice_type.blank?
      full_teo += i.invoice_type.code.to_s
    else
      full_teo += i.invoice_type.blank?
    end
    if !i.invoice_status.blank?
      full_teo += full_teo.blank? ? i.invoice_status.code : " " + i.invoice_status.code.to_s
    else
      full_teo += full_teo.blank? ? i.invoice_status.blank? : " " + i.invoice_status.blank?
    end
    if !i.invoice_operation.blank?
      full_teo += full_teo.blank? ? i.invoice_operation.code : " " + i.invoice_operation.code.to_s
    else
      full_teo += full_teo.blank? ? i.invoice_operation.blank? : " " + i.invoice_operation.blank?
    end
    row.item(:teo).value full_teo
    row.item(:subtotal).value number_with_precision(i.subtotals, precision: 2, delimiter: I18n.locale == :es ? "." : ",") unless i.subtotals.blank?
    row.item(:taxes).value number_with_precision(i.total_taxes, precision: 2, delimiter: I18n.locale == :es ? "." : ",") unless i.total_taxes.blank?
    row.item(:total).value number_with_precision(i.totals, precision: 2, delimiter: I18n.locale == :es ? "." : ",") unless i.totals.blank?
    row.item(:total_paid).value number_with_precision(i.receivables, precision: 2, delimiter: I18n.locale == :es ? "." : ",") unless i.receivables.blank?
    row.item(:paid).value number_with_precision(i.collected, precision: 2, delimiter: I18n.locale == :es ? "." : ",") unless i.collected.blank?
    row.item(:debt).value number_with_precision(i.debt, precision: 2, delimiter: I18n.locale == :es ? "." : ",") unless i.debt.blank?
  end

  # Store page subtotals
  report.page.list(:default) do |list|
    list.store.page_rows += 1
    list.store.p_subtotal += i.subtotals.round(2)
    list.store.p_taxes += i.total_taxes.round(2)
    list.store.p_total += i.totals.round(2)
    list.store.p_total_paid += i.receivables.round(2)
    list.store.p_paid += i.collected.round(2)
    list.store.p_debt += i.debt.round(2)
  end
end

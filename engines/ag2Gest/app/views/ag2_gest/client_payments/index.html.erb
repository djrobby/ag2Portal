<% session[:return_to] = nil %>
<% session[:return_to_url] = nil %>

<script>
  var _thisForm = '';
  var changing = false;
  var _currentLocale = 'es';
  var _delimiter = '.';
  var _separator = ',';
  var _active_tab = 'pendings-tab';
  var _cashier_shown = false;

  function show_cashier() {
    if (_active_tab == "pendings-tab") {
      <% if !@bills_pending.blank? %>
      $("#cashier").show();
      _cashier_shown = true;
      <% else %>
      $("#cashier").hide();
      _cashier_shown = false;
      <% end %>
    } else if (_active_tab == "fractionated-tab") {
      <% if !@instalment_invoices.blank? %>
      $("#cashier").show();
      _cashier_shown = true;
      <% else %>
      $("#cashier").hide();
      _cashier_shown = false;
      <% end %>
    } else {
      $("#cashier").hide();
      _cashier_shown = false;
    }
  }

  function enable_client_payment_amount(b) {
    if (b) {
      $('#client_payment_amount').prop('disabled', false);
    } else {
      $('#client_payment_amount').prop('disabled', true);
    }
  }

  function enable_pending_buttons(b) {
    if (b) {
      $('.btn-bank').show();
      $('.btn-fractionated').show();
      $('.btn-others').show();
    } else {
      $('.btn-bank').hide();
      $('.btn-fractionated').hide();
      $('.btn-others').hide();
    }
  }

  function set_show_all_checkboxes() {
    if ($('#per_page_cash').val() != '') {
      $('#cash-all').prop('checked', true)
    } else {
      $('#cash-all').prop('checked', false)
    }
    if ($('#per_page_bank').val() != '') {
      $('#bank-all').prop('checked', true)
    } else {
      $('#bank-all').prop('checked', false)
    }
    if ($('#per_page_deferrals').val() != '') {
      $('#instalment-all').prop('checked', true)
    } else {
      $('#instalment-all').prop('checked', false)
    }
    if ($('#per_page_others').val() != '') {
      $('#other-all').prop('checked', true)
    } else {
      $('#other-all').prop('checked', false)
    }
  }

  function setupAllSelect2(p, r, u, c, s, a) {
    projectsSelect2(p);
    periodsSelect2(r);
    usersSelect2(u);
    clientsSelect2(c);
    subscribersSelect2(s);
    addressesSelect2(a);
  }

  function projectsSelect2(intialValue) {
    $('#Project').select2({
      formatNoMatches: function(m) { return '<%= I18n.t("select2.no_matches") %>'; },
      dropdownCssClass: 'shrinked',
      dropdownAutoWidth: true,
      placeholder: intialValue,
      allowClear: true,
      data: intialValue,
      ajax: {
        url: "/search_projects",
        dataType: "json",
        delay: 250,
        data: function(term, page) {
          return {
            q: term || '',
            page: page || 1
          };
        },
        results: function(data, page) {
          return {
            results: data
          }
        },
        cache: true
      }
    });
  }

  function periodsSelect2(intialValue) {
    $('#Period').select2({
      formatNoMatches: function(m) { return '<%= I18n.t("select2.no_matches") %>'; },
      dropdownCssClass: 'shrinked',
      dropdownAutoWidth: true,
      placeholder: intialValue,
      allowClear: true,
      ajax: {
        url: "/search_billing_periods",
        dataType: "json",
        delay: 250,
        data: function(term, page) {
          return {
            q: term || '',
            page: page || 1
          };
        },
        results: function(data, page) {
          return {
            results: data
          }
        },
        cache: true
      }
    });
  }

  function usersSelect2(intialValue) {
    $('#User').select2({
      formatNoMatches: function(m) { return '<%= I18n.t("select2.no_matches") %>'; },
      dropdownCssClass: 'shrinked',
      dropdownAutoWidth: true,
      placeholder: intialValue,
      allowClear: true,
      ajax: {
        url: "/search_users",
        dataType: "json",
        delay: 250,
        data: function(term, page) {
          return {
            q: term || '',
            page: page || 1
          };
        },
        results: function(data, page) {
          return {
            results: data
          }
        },
        cache: true
      }
    });
  }

  function clientsSelect2(intialValue) {
    $('#Client').select2({
      formatNoMatches: function(m) { return '<%= I18n.t("select2.no_matches") %>'; },
      dropdownCssClass: 'shrinked',
      dropdownAutoWidth: true,
      placeholder: intialValue,
      allowClear: true,
      ajax: {
        url: "/search_clients",
        dataType: "json",
        delay: 250,
        data: function(term, page) {
          return {
            q: term || '',
            page: page || 1
          };
        },
        results: function(data, page) {
          return {
            results: data
          }
        },
        cache: true
      }
    });
  }

  function subscribersSelect2(intialValue) {
    $('#Subscriber').select2({
      formatNoMatches: function(m) { return '<%= I18n.t("select2.no_matches") %>'; },
      dropdownCssClass: 'shrinked',
      dropdownAutoWidth: true,
      placeholder: intialValue,
      allowClear: true,
      ajax: {
        url: "/search_subscribers",
        dataType: "json",
        delay: 250,
        data: function(term, page) {
          return {
            q: term || '',
            page: page || 1
          };
        },
        results: function(data, page) {
          return {
            results: data
          }
        },
        cache: true
      }
    });
  }

  function addressesSelect2(intialValue) {
    $('#StreetName').select2({
      formatNoMatches: function(m) { return '<%= I18n.t("select2.no_matches") %>'; },
      dropdownCssClass: 'shrinked',
      dropdownAutoWidth: true,
      placeholder: intialValue,
      allowClear: true,
      ajax: {
        url: "/search_supply_addresses",
        dataType: "json",
        delay: 250,
        data: function(term, page) {
          return {
            q: term || '',
            page: page || 1
          };
        },
        results: function(data, page) {
          return {
            results: data
          }
        },
        cache: true
      }
    });
  }

  $(document).ready(function() {
    $('.sel2').select2({
      formatNoMatches: function(m) { return '<%= I18n.t("select2.no_matches") %>'; },
      dropdownCssClass: 'shrinked',
      dropdownAutoWidth: true,
      allowClear: true
    });
    $('.sel3').select2({
      formatNoMatches: function(m) { return '<%= I18n.t("select2.no_matches") %>'; },
      dropdownCssClass: 'shrinked',
      dropdownAutoWidth: true,
      allowClear: true
    });
    $('.sel4').select2({
      formatNoMatches: function(m) { return '<%= I18n.t("select2.no_matches") %>'; },
      dropdownAutoWidth: true,
      allowClear: true
    });
    // Date picker
    $('.date_picker').datepicker({
      format : 'dd/mm/yyyy',
      weekStart : 1
    }).on('changeDate', function(e){
      $('.date_picker').datepicker('hide');
    });

    // Current localization
    _currentLocale = '<%= I18n.locale %>'
    if (_currentLocale == 'es') {
      _delimiter = '.';
      _separator = ',';
    } else {
      _delimiter = ',';
      _separator = '.';
    }

    // Setup special search (select2)
    setupAllSelect2("<%= @project %>", "<%= @period %>", "<%= @user %>", "<%= @client %>", "<%= @subscriber %>", "<%= @address %>");

    // Hide elements at init
    show_cashier();

    // Set cash, bank, deferrals & others show-all checkboxes
    set_show_all_checkboxes()

    // Initialized form variable
    _thisForm = $("#removeFilter").closest('form')[0];

    // Set default dates
    if ($('#bank_to_order_presentation_date').val() == "") {
      $('#bank_to_order_presentation_date').datepicker('setValue', es_date(new Date()));
    }
    if ($('#bank_to_order_charge_date').val() == "") {
      $('#bank_to_order_charge_date').datepicker('setValue', es_date(new Date()));
    }
  });

  // $(document).ajaxStart(function() {
  //   // show loader on start
  //   if (changing == false) {
  //     $("#pendings").html("");
  //     $("#unpaid").html("");
  //     $("#charged").html("");
  //     $("#cash").html("");
  //     $("#banks").html("");
  //     $("#others").html("");
  //     $("#fractionated").html("");
  //     $("#loader").show();
  //   }
  // });
  $(document).ajaxSuccess(function() {
    // hide loader on success
    $("#loader").hide();
  });

  $(window).bind("load", function() {
    a = "<%= cp_restore_filters %>";
    $("#per_page_cash").val("<%= params[:per_page_cash] %>");
    $("#per_page_bank").val("<%= params[:per_page_bank] %>");
    $("#per_page_deferrals").val("<%= params[:per_page_deferrals] %>");
    $("#per_page_others").val("<%= params[:per_page_others] %>");
    $("#active_tab").val("<%= params[:active_tab] %>");
    $("#No").val("<%= params[:No] %>");
    // $("#Project").select2("val", "<%#= params[:Project] %>");
    // $("#Client").val("<%= params[:Client] %>");
    // $("#ClientCode").val("<%= params[:ClientCode] %>");
    // $("#ClientFiscal").val("<%= params[:ClientFiscal] %>");
    // $("#Subscriber").val("<%= params[:Subscriber] %>");
    // $("#SubscriberCode").val("<%= params[:SubscriberCode] %>");
    // $("#SubscriberFiscal").val("<%= params[:SubscriberFiscal] %>");
    // $("#StreetName").val("<%= params[:StreetName] %>");
    $("#BankAccount").val("<%= params[:BankAccount] %>");
    $("#BankOrder").val("<%= params[:BankOrder] %>");
    // $("#Period").select2("val", "<%#= params[:billing_period] %>");
    $("#initial-cash").val("<%= @opening_balance %>");
  });

  jQuery(function($) {
    // when .icon-refresh-link is clicked
    $(".icon-refresh-link").click(function() {
      // show loader
      $('#pendings').removeClass('pendings');
      $("#pendings").html("");
      $("#unpaid").html("");
      $("#charged").html("");
      $("#cash").html("");
      $("#banks").html("");
      $("#others").html("");
      $("#fractionated").html("");
      $("#cashier").hide();
      $("#loader").show();
      _cashier_shown = false;
      total_debt = 0;
      invoices_id = [];
      $("#client_payment_invoices_ids").val(invoices_id.filter(i=>i!=null))
      $("#client_payment_ids").val(invoices_id.filter(i=>i!=null))
      $(".debt-total-cashier").text(total_debt.format(2, 3, _delimiter, _separator));
      $(".cash-return-cashier").text(total_debt.format(2, 3, _delimiter, _separator));
      $("#initial-cash").val("<%= @opening_balance %>");
    });

    // when #submit_btn is clicked
    $("#submit_btn").click(function() {
      // show loader
      $('#pendings').removeClass('pendings');
      $("#pendings").html("");
      $("#unpaid").html("");
      $("#charged").html("");
      $("#cash").html("");
      $("#banks").html("");
      $("#others").html("");
      $("#fractionated").html("");
      $("#cashier").hide();
      $("#loader").show();
      _cashier_shown = false;
    });

    $("#removeFilter").click(function() {
      $("#No").val("");
      $("#Project").select2("val", "");
      $("#Period").select2("val", "");
      $("#Client").select2("val", "");
      // $("#ClientCode").val("");
      // $("#ClientFiscal").val("");
      $("#Subscriber").select2("val", "");
      // $("#SubscriberCode").val("");
      // $("#SubscriberFiscal").val("");
      $("#StreetName").select2("val", "");
      $("#BankAccount").val("");
      $("#BankOrder").val("");
      $("#User").select2("val", "");
      a = "<%= cp_remove_filters %>";
      setupAllSelect2(a, a, a, a, a, a);
      show_cashier();
      remove_tab_indicator = $('#active_tab').val() + '!';
      $('#active_tab').val(remove_tab_indicator);
      // no AJAX
      //_thisForm.submit();
      // AJAX
      $("#submit_btn").trigger("click");
    });
  });

  $('.accor').click(function () {
    if (this.classList.contains("collapsed")){
      this.children[0].className = "icon-minus";
    }else {
      this.children[0].className = "icon-plus";
    }
  });

  $("#pages a").on("click", function() {
    $.getScript(this.href);
    return false;
  });

  // when #print_report_btn is clicked
  $("#print_report_btn").click(function() {
    // make a POST call and get report
    window.open("client_payment_report.pdf", "_blank");
    return false;
  });

  //  // when #report_btn is clicked
  //   $("#print_report_btn").click(function() {
  //     // make a POST call and get report
  //     var report = $('#Report :selected').index();
  //     if (report == "")
  //       return;
  //     switch (report) {
  //       case 1:
  //         // bill
  //         window.open("bill_report.pdf", "_blank");
  //         return false;
  //         break;

  //         case 2:
  //         // bill pending
  //         window.open("bill_pending_report.pdf", "_blank");
  //         return false;
  //         break;

  //         case 3:
  //         // bill unpaid
  //         window.open("bill_unpaid_report.pdf", "_blank");
  //         return false;
  //         break;

  //         case 4:
  //         // bill charged
  //         window.open("bill_charged_report.pdf", "_blank");
  //         return false;
  //         break;

  //         case 5:
  //         // client_payment
  //         window.open("client_payment_report.pdf", "_blank");
  //         return false;
  //         break;
  //     }
  //     return false;
  // });
</script>

<style>
  .accordion{
    background-color: white !important;
  }
  .tab-pane{
    width: 98%;
    padding: 0 1% 0 1%;
  }
  .checkbox-master{
    margin-top: 12px !important;
    margin-left: 5px !important;
  }
  .condensed-accordion {
    margin:5px 0 5px 0 !important;
  }
  #pendings, #unpaid, #charged{
    background-color: #FDE3A7;
  }
  .pendings {
    padding-bottom: 30px !important;
  }
  #cash, #banks, #others ,#fractionated{
    background-color: #FFCCBC;
  }
  #cashier {
    position: fixed;
    height: 104px;
    width: 810px;
    bottom: 0;
    margin-bottom: 0;
    padding: 14px 15px 15px;
    text-align: left;
    background-color: #f5f5f5;
    border-top: 1px solid #ddd;
    overflow-y: auto;
    -webkit-border-radius: 0 0 6px 6px;
       -moz-border-radius: 0 0 6px 6px;
            border-radius: 0 0 6px 6px;
    *zoom: 1;
    -webkit-box-shadow: inset 0 1px 0 #ffffff;
       -moz-box-shadow: inset 0 1px 0 #ffffff;
            box-shadow: inset 0 1px 0 #ffffff;
  }

  #cashier .button-top {
    vertical-align: top !important;
    text-align: right;
  }

  #cashier .text-middle {
    vertical-align: text-top !important;
  }
</style>

<% session[:return_to] = I18n.t('ag2_gest.client_payments.show.return_to') %>
<% session[:return_to_url] = "#{request.protocol}#{request.host_with_port}#{request.fullpath}" %>

<%= render '/layouts/ag2_gest/clientpaymentsbreadcrumb' %>

<h3><%= t '.title' %></h3>

<div class="container-fluid">
  <div class="row-fluid">

    <div class="span3">
      <div class="well sidebar-nav">
        <!-- Refresh -->
        <%= link_to ag2_gest.client_payments_path, title: I18n.t(:refresh), class: "icon-refresh-link", remote: true do %><i class="icon-refresh"></i><% end %>
        <!-- Search form -->
        <%= form_tag "client_payments", :method => 'get', :remote => true do %>
          <!-- Per page -->
          <%= hidden_field_tag "per_page_cash", params[:per_page_cash], :class => 'x-large-text-field shrinked' %>
          <%= hidden_field_tag "per_page_bank", params[:per_page_bank], :class => 'x-large-text-field shrinked' %>
          <%= hidden_field_tag "per_page_deferrals", params[:per_page_deferrals], :class => 'x-large-text-field shrinked' %>
          <%= hidden_field_tag "per_page_others", params[:per_page_others], :class => 'x-large-text-field shrinked' %>
          <!-- Active Tab -->
          <%= hidden_field_tag "active_tab", params[:active_tab], :class => 'x-large-text-field shrinked' %>
          <!-- No -->
          <%= label_tag "label_no", I18n.t("ag2_gest.client_payments.index.label_no"), :class => 'form-label' %>
          <%= text_field_tag "No", nil, :class => 'x-large-text-field shrinked number-text-field', onkeyup: "caps(this)" %>
          <!-- Project -->
          <%= label_tag "label_project", I18n.t("ag2_gest.client_payments.index.label_project"), :class => 'form-label' %>
          <%= hidden_field_tag "Project", params[:Project], :class => 'x-large-text-field shrinked', data: { allow: { clear: 'false' } } %>
          <!-- Period -->
          <%= label_tag "label_period", I18n.t("ag2_gest.client_payments.index.label_period"), :class => 'form-label-under-sel2' %>
          <%= hidden_field_tag "Period", params[:Period], :class => 'x-large-text-field shrinked', data: { allow: { clear: 'false' } } %>
          <!-- Client Code -->
          <%#= label_tag "label_client_code", I18n.t("ag2_gest.client_payments.index.label_client_code"), :class => 'form-label-under-sel2' %>
          <%#= text_field_tag "ClientCode", params[:ClientCode], :class => 'x-large-text-field shrinked number-text-field', onkeyup: "caps(this)" %>
          <!-- Client Fiscal Id -->
          <%#= label_tag "label_client_fiscal", I18n.t("ag2_gest.client_payments.index.label_client_fiscal"), :class => 'form-label' %>
          <%#= text_field_tag "ClientFiscal", params[:ClientFiscal], :class => 'x-large-text-field shrinked', onkeyup: "caps(this)" %>
          <!-- Client (name) -->
          <%= label_tag "label_client", I18n.t("ag2_gest.client_payments.index.label_client"), :class => 'form-label-under-sel2' %>
          <%= hidden_field_tag "Client", params[:Client], :class => 'x-large-text-field shrinked', data: { allow: { clear: 'false' } } %>
          <%#= text_field_tag "Client", params[:Client], :class => 'x-large-text-field shrinked' %>
          <!-- Subscriber Code -->
          <%#= label_tag "label_subscriber_code", I18n.t("ag2_gest.client_payments.index.label_subscriber_code"), :class => 'form-label' %>
          <%#= text_field_tag "SubscriberCode", params[:SubscriberCode], :class => 'x-large-text-field shrinked number-text-field', onkeyup: "caps(this)" %>
          <!-- Subscriber Fiscal Id -->
          <%#= label_tag "label_subscriber_fiscal", I18n.t("ag2_gest.client_payments.index.label_subscriber_fiscal"), :class => 'form-label' %>
          <%#= text_field_tag "SubscriberFiscal", params[:SubscriberFiscal], :class => 'x-large-text-field shrinked', onkeyup: "caps(this)" %>
          <!-- Subscriber (name) -->
          <%= label_tag "label_subscriber", I18n.t("ag2_gest.client_payments.index.label_subscriber"), :class => 'form-label-under-sel2' %>
          <%= hidden_field_tag "Subscriber", params[:Subscriber], :class => 'x-large-text-field shrinked', data: { allow: { clear: 'false' } } %>
          <%#= text_field_tag "Subscriber", params[:Subscriber], :class => 'x-large-text-field shrinked' %>
          <!-- Supply address (street name) -->
          <%= label_tag "label_street", I18n.t("ag2_gest.client_payments.index.label_street"), :class => 'form-label-under-sel2' %>
          <%= hidden_field_tag "StreetName", params[:StreetName], :class => 'x-large-text-field shrinked', data: { allow: { clear: 'false' } } %>
          <%#= text_field_tag "StreetName", params[:StreetName], :class => 'x-large-text-field shrinked' %>
          <!-- Have BankAccount? -->
          <%= label_tag "label_bank_account", I18n.t("ag2_gest.client_payments.index.label_bank_account"), :class => 'form-label-under-sel2' %>
          <%= select_tag "BankAccount", options_for_select(@have_bank_account), include_blank: true, :prompt => "", :class => 'x-large-text-field shrinked' %>
          <!-- Bank -->
          <%= label_tag "label_bank", I18n.t("ag2_gest.client_payments.index.label_bank"), :class => 'form-label' %>
          <%= text_field_tag "Bank", params[:Bank], :class => 'x-large-text-field shrinked' %>
          <!-- Bank Order -->
          <%= label_tag "label_bank_order", I18n.t("ag2_gest.client_payments.index.label_bank_order"), :class => 'form-label' %>
          <%= text_field_tag "BankOrder", params[:BankOrder], :class => 'x-large-text-field shrinked' %>
          <!-- User -->
          <%= label_tag "label_user", I18n.t("activerecord.models.user.one"), :class => 'form-label' %>
          <%= hidden_field_tag "User", params[:User], :class => 'x-large-text-field shrinked', data: { allow: { clear: 'false' } } %>
          <!-- Submit -->
          <br/><br/>
          <%= submit_tag I18n.t(:apply_filter_button), :class => 'btn btn-primary', :id => 'submit_btn' %>
          <!-- Remove filter -->
          <button id="removeFilter" type="button" class="btn btn-primary" data-dismiss="modal" aria-hidden="true"><%= t :clear_filter_button %></button>
        <% end %>

      <!-- Report -->
      <!--
      <%#= label_tag I18n.t("ag2_gest.client_payments.report.report"), nil, :class => 'form-label-under-sel2' %>
      <%#= select_tag "Report", options_for_select(@reports), :prompt => "", :class => 'x-large-text-field shrinked sel3' %>
        <br /><br /> -->
        <!-- Control&Tracking -->
        <a href="#" id="print_report_btn" class="btn btn-warning"><i class="icon-print icon-white"></i> <%= t 'ag2_gest.home.index.control' %></a>
        <br /><br />

        <!-- <br /> -->
        <% if !session[:return_to_cr].nil? %>
        <%= link_to session[:return_to_cr], session[:return_to_cr_url] %> |
        <% end %>
        <%= link_to t(".back_to_root"), ag2_gest.root_path %>
      </div><!-- /.sidebar-nav -->
    </div><!-- /.span3 -->

    <div class="span9">
      <div class="span6 text-center"><h4><%= t('activerecord.models.invoice.few') %></h4></div>
      <div class="span6 text-center"><h4><%= t('activerecord.models.client_payment.few') %></h4></div>
      <ul class="nav nav-tabs" id="payments-tabs">
        <li class="active" style="width:25%"><a id="pendings-tab" href="#pendings" data-toggle="tab"><%= I18n.t("ag2_gest.client_payments.index.pending") %></a></li>
        <!-- <li style="width:16%"><a href="#unpaid">Impagadas</a></li> -->
        <li style="width:25%"><a id="charged-tab" href="#charged" data-toggle="tab"><%= I18n.t("ag2_gest.client_payments.index.charged") %></a></li>
        <li class="pull-right"><a id="others-tab" href="#others" data-toggle="tab"><%= I18n.t("ag2_gest.client_payments.index.others") %></a></li>
        <li class="pull-right"><a id="fractionated-tab" href="#fractionated" data-toggle="tab"><%= I18n.t("ag2_gest.client_payments.index.deferrals") %></a></li>
        <li class="pull-right"><a id="banks-tab" href="#banks" data-toggle="tab"><%= I18n.t("ag2_gest.client_payments.index.bank") %></a></li>
        <li class="pull-right"><a id="cash-tab" href="#cash" data-toggle="tab"><%= I18n.t("ag2_gest.client_payments.index.cash") %></a></li>
      </ul>
      <div id="loader"></div>

      <div id="div_table">
        <div class="tab-content">
        <!-- PENDING TAB -->
          <div id="pendings" class="pendings tab-pane active">
            <%= render 'bills_pendings' %>
          </div>
          <div id="cashier">
            <%= simple_form_for :client_payment, url: cash_client_payments_path, method: :post, :html => { class: 'cashier-form' } do |f| %>
              <%= f.input :invoices_ids, :as => :hidden %> <!-- Charge invoices -->
              <%= f.input :ids, :as => :hidden %>          <!-- Charge instalments -->
              <table id="cashier-table" style="width: 100%;">
                <!-- debt -->
                <col width="15%" />
                <!-- amount -->
                <col width="30%" />
                <!-- separator -->
                <!-- <col width="1%" /> -->
                <!-- payment method -->
                <col width="30%" />
                <!-- cash return -->
                <col width="15%" />
                <!-- button -->
                <col width="10%" />
                <thead>
                  <tr>
                    <td><label class="form-label"><%= t('activerecord.attributes.client_payment.to_collect') %></label></td>
                    <td align="center"><label class="form-label"><%= t('activerecord.attributes.client_payment.amount') %></label></td>
                    <!-- <td></td> -->
                    <td align="center"><label class="form-label"><%= t('activerecord.attributes.client_payment.payment_method_id') %></label></td>
                    <td align="right"><label class="form-label"><%= t('activerecord.attributes.client_payment.change') %></label></td>
                    <td align="right"></td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td class="text-middle">
                      <div class="control-group string required">
                        <div class="controls string required highlighted bolded">
                          <span class="debt-total-cashier">0,00</span>
                        </div>
                      </div>
                    </td>
                    <td align="center">
                      <%= f.input :amount, required: true, label: false, as: :decimal, input_html: { class: 'number-text-field' } %>
                    </td>
                    <!-- <td></td> -->
                    <td align="center">
                      <%= f.input :payment_method_id, required: true, label: false, collection: @cashier_payment_methods, selected: 0 %>
                    </td>
                    <td align="right" class="text-middle">
                      <div class="control-group string required">
                        <div class="controls highlighted bolded">
                          <span class="cash-return-cashier">0,00</span>
                        </div>
                      </div>
                    </td>
                    <td align="right" class="button-top">
                      <%= button_tag(type: 'submit', name: 'commit', class: 'btn btn-primary', id: 'btn-submit-modal-cash', title: I18n.t('ag2_gest.client_payments.index.cash_and_receipt')) do %>
                        <i class="icon-print icon-white"></i> <%= t('ag2_gest.client_payments.index.cash') %>
                      <% end %>
                      <%#= f.button :submit, t('ag2_gest.client_payments.index.cash'), :class => 'btn btn-primary', id: 'btn-submit-modal-cash1' %>
                    </td>
                  </tr>
                </tbody>
              </table>
            <% end %>
          </div>

          <!-- UNPAID TAB -->
          <!-- <div class="tab-pane" id="unpaid">
            <%#= render 'bills_unpaid' %>
          </div> -->

          <!-- CHARGED TAB -->
          <div id="charged" class="tab-pane">
            <%= render 'bills_charged' %>
          </div>

          <!-- CASH TAB -->
          <div id="cash" class="tab-pane">
            <%= render 'payments_cash' %>
          </div>

          <!-- BANK TAB -->
          <div id="banks" class="tab-pane">
            <%= render 'payments_bank' %>
          </div>

          <!-- OTHERS TAB -->
          <div id="others" class="tab-pane">
            <%= render 'payments_other' %>
          </div>

          <!-- FRACTIONATED TAB -->
          <div id="fractionated" class="tab-pane">
            <%= render 'instalments' %>
          </div>
        </div><!-- /.tab-content -->
      </div><!-- /#div_table -->
    </div><!-- /.span9 -->

    <!-- Modals -->
    <!-- Cash -->
    <%= render 'modal_cash' %>

    <!-- Others -->
    <%= render 'modal_others' %>

    <!-- Bank -->
    <%= render 'modal_bank' %>

    <!-- Instalments -->
    <%= render 'modal_instalment' %>

    <!-- Close Cash -->
    <%= render 'modal_cash_close' %>

    <!-- Cash To Pending (modal) -->
    <div id="modal-cash-to-pending" class="modal hide fade" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="Devolver" aria-hidden="true">
      <div class="modal-header">
        <a class="close" data-dismiss="modal">&#215;</a>
        <h4><%= t "ag2_gest.client_payments.index.back_to_pending" %></h4>
      </div>
      <%= simple_form_for :cash_to_pending, url: cash_to_pending_client_payments_path, method: :post, :html => {:class => 'modal-footer-right cash-to-pending-form'} do |f| %>
        <div class="modal-body">
          <%= f.input :client_payments_ids, :as => :hidden %>
          <div class="control-group string required">
            <label class="string control-label">Recibos seleccionados</label>
            <div class="controls highlighted bolded">
              <span id="bills-cash-to-pending"><%= @cash_totals[:payments] %></span>
            </div>
          </div>
          <div class="control-group string required">
            <label class="string control-label">Total a devolver</label>
            <div class="controls highlighted bolded">
              <span id="total-cash-to-pending"><%= number_with_precision(@cash_totals[:totals], precision: 2, delimiter: I18n.locale == :es ? "." : ",") %></span>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <%= f.button :submit, "Confirmar", disable_with: t("activerecord.attributes.pre_reading.loading"), :class => 'btn btn-primary' %>
          <button class="btn btn-primary" data-dismiss="modal" aria-hidden="true"><%= t :close_button %></button>
        </div>
      <% end %>
    </div><!-- Cash To Pending -->

    <!-- Bank Confirmation (modal) -->
    <div id="modal-bank-confirm" class="modal hide fade" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="ConfirmarBanco" aria-hidden="true">
      <div class="modal-header">
        <a class="close" data-dismiss="modal">&#215;</a>
        <h4><%= t "ag2_gest.client_payments.index.bank_confirm" %></h4>
      </div>
      <%= simple_form_for :bank_confirm, url: confirm_bank_client_payments_path, method: :post, :html => {:class => 'modal-footer-right bank-confirm-form'} do |f| %>
        <div class="modal-body">
          <%= f.input :client_payments_ids, :as => :hidden %>
          <div class="control-group string required">
            <label class="string control-label">Recibos seleccionados</label>
            <div class="controls highlighted bolded">
              <span id="bank-bills-selected"><%= @bank_totals[:payments] %></span>
            </div>
          </div>

          <div class="control-group string required">
            <label class="string control-label">Total cobrado</label>
            <div class="controls highlighted bolded">
              <span id="bank-total-selected"><%= number_with_precision(@bank_totals[:totals], precision: 2, delimiter: I18n.locale == :es ? "." : ",") %></span>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <%= f.button :submit, "Confirmar", disable_with: t("activerecord.attributes.pre_reading.loading"), :class => 'btn btn-primary' %>
          <button class="btn btn-primary" data-dismiss="modal" aria-hidden="true"><%= t :close_button %></button>
        </div>
      <% end %>
    </div><!-- Modal Bank Confirmation -->

    <!-- Bank To Pending (modal) -->
    <div id="modal-bank-to-pending" class="modal hide fade" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="Devolver" aria-hidden="true">
      <div class="modal-header">
        <a class="close" data-dismiss="modal">&#215;</a>
        <h4><%= t "ag2_gest.client_payments.index.back_to_pending" %></h4>
      </div>
      <%= simple_form_for :bank_to_pending, url: bank_to_pending_client_payments_path, method: :post, :html => {:class => 'modal-footer-right bank-to-pending-form'} do |f| %>
        <div class="modal-body">
          <%= f.input :client_payments_ids, :as => :hidden %>
          <div class="control-group string required">
            <label class="string control-label">Recibos seleccionados</label>
            <div class="controls highlighted bolded">
              <span id="bank-to-pending-bills-selected"><%= @bank_totals[:payments] %></span>
            </div>
          </div>
          <div class="control-group string required">
            <label class="string control-label">Total a devolver</label>
            <div class="controls highlighted bolded">
              <span id="bank-to-pending-total-selected"><%= number_with_precision(@bank_totals[:totals], precision: 2, delimiter: I18n.locale == :es ? "." : ",") %></span>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <%= f.button :submit, "Confirmar", disable_with: t("activerecord.attributes.pre_reading.loading"), :class => 'btn btn-primary' %>
          <button class="btn btn-primary" data-dismiss="modal" aria-hidden="true"><%= t :close_button %></button>
        </div>
      <% end %>
    </div><!-- Bank To Pending -->

    <!-- Bank To Order (modal) -->
    <div id="modal-bank-to-order" class="modal hide fade" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="Remesar" aria-hidden="true">
      <div class="modal-header">
        <a class="close" data-dismiss="modal">&#215;</a>
        <h4><%= t "ag2_gest.client_payments.index.bank_order" %></h4>
      </div>
      <%= simple_form_for :bank_to_order, url: bank_to_order_client_payments_path, method: :post, :html => {:class => 'modal-footer-right bank-to-order-form'} do |f| %>
        <div class="modal-body">
          <%= f.input :client_payments_ids, :as => :hidden %>
          <div class="control-group string required">
            <label class="string control-label">Recibos seleccionados</label>
            <div class="controls highlighted bolded">
              <span id="bank-to-order-bills-selected"><%= @bank_totals[:payments] %></span>
            </div>
          </div>
          <div class="control-group string required">
            <label class="string control-label">Total a remesar</label>
            <div class="controls highlighted bolded">
              <span id="bank-to-order-total-selected"><%= number_with_precision(@bank_totals[:totals], precision: 2, delimiter: I18n.locale == :es ? "." : ",") %></span>
            </div>
          </div>
          <%= f.input :bank_account_id, required: true, label: I18n.t("activerecord.attributes.client_payment.bank_account_id"), collection: @bank_accounts, inline_label: "Yes", :input_html => { :class => 'x-large-text-field sel4' }, :label_html => { :class => 'form-label' } %>
          <%= f.input :scheme_type_id, required: true, label: I18n.t("activerecord.attributes.client_payment.scheme_type_id"), collection: @scheme_types, inline_label: "Yes", :input_html => { :class => 'x-large-text-field sel4' }, :label_html => { :class => 'form-label' } %>
          <%= f.input :presentation_date, required: true, label: I18n.t("activerecord.attributes.client_payment.presentation_date"), inline_label: "Yes", :input_html => { :class => 'x-large-text-field date_picker' }, :label_html => { :class => 'form-label' } %>
          <%= f.input :charge_date, required: true, label: I18n.t("activerecord.attributes.client_payment.charge_date"), inline_label: "Yes", :input_html => { :class => 'x-large-text-field date_picker' }, :label_html => { :class => 'form-label' } %>
        </div><!-- modal-body -->
        <div class="modal-footer">
          <%= f.button :submit, "Confirmar", disable_with: t("activerecord.attributes.pre_reading.loading"), :class => 'btn btn-primary' %>
          <button class="btn btn-primary" data-dismiss="modal" aria-hidden="true"><%= t :close_button %></button>
        </div>
      <% end %>
    </div><!-- Bank To Order -->

    <!-- Bank From Return (modal) -->
    <div id="modal-bank-from-return" class="modal hide fade" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="Devolver" aria-hidden="true">
      <div class="modal-header">
        <a class="close" data-dismiss="modal">&#215;</a>
        <h4><%= t "ag2_gest.client_payments.index.bank_return" %></h4>
      </div>
      <%= simple_form_for :bank_from_return, url: bank_from_return_client_payments_path, method: :post, :html => {:class => 'modal-footer-right bank-from-return-form'} do |f| %>
        <div class="modal-body">
          <%#= f.input :file_to_process, as: :file, input_html: { accept: 'image/*' }, label_html: { class: 'form-label' } %>
          <%= f.input :file_to_process, as: :file, required: true, label: I18n.t("activerecord.attributes.client_payment.return_file"), inline_label: "Yes", :input_html => { :class => 'x-large-text-field' }, :label_html => { :class => 'form-label' } %>
        </div><!-- modal-body -->
        <div class="modal-footer">
          <%= f.button :submit, "Confirmar", disable_with: t("activerecord.attributes.pre_reading.loading"), :class => 'btn btn-primary' %>
          <button class="btn btn-primary" data-dismiss="modal" aria-hidden="true"><%= t :close_button %></button>
        </div>
      <% end %>
    </div><!-- Bank From Return -->

    <!-- Bank From Counter (modal) -->
    <div id="modal-bank-from-counter" class="modal hide fade" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="Devolver" aria-hidden="true">
      <div class="modal-header">
        <a class="close" data-dismiss="modal">&#215;</a>
        <h4><%= t "ag2_gest.client_payments.index.bank_counter" %></h4>
      </div>
      <%= simple_form_for :bank_from_counter, url: bank_from_counter_client_payments_path, method: :post, :html => {:class => 'modal-footer-right bank-from-counter-form'} do |f| %>
        <div class="modal-body">
          <%= f.input :file_to_process, as: :file, required: true, label: I18n.t("activerecord.attributes.client_payment.counter_file"), inline_label: "Yes", :input_html => { :class => 'x-large-text-field' }, :label_html => { :class => 'form-label' } %>
        </div><!-- modal-body -->
        <div class="modal-footer">
          <%= f.button :submit, "Confirmar", disable_with: t("activerecord.attributes.pre_reading.loading"), :class => 'btn btn-primary' %>
          <button class="btn btn-primary" data-dismiss="modal" aria-hidden="true"><%= t :close_button %></button>
        </div>
      <% end %>
    </div><!-- Bank From Return -->
  </div><!-- row-fluid -->
</div><!-- container-fluid -->

<script type="text/javascript">
  if (location.hash !== '') {
      $('#payments-tabs a[href="' + location.hash.replace('tab_','') + '"]').tab('show');
  } else {
      $('#payments-tabs a:first').tab('show');
  }
  $('#payments-tabs a[data-toggle="tab"]').on('shown', function(e) {
        location.hash = 'tab_'+  e.target.hash.substr(1) ;
        return false ;
  });

  $('#payments-tabs a').click(function (e) {
    _active_tab = $(this).attr("id");
    total_debt = 0;
    invoices_id = [];
    e.preventDefault();
    $('input:checkbox').removeAttr('checked');
    $("#client_payment_invoices_ids").val(invoices_id.filter(i=>i!=null))
    $("#client_payment_ids").val(invoices_id.filter(i=>i!=null))
    $(".debt-total-cashier").text(total_debt.format(2, 3, _delimiter, _separator));
    $(".cash-return-cashier").text(total_debt.format(2, 3, _delimiter, _separator));
    $("#client_payment_amount").val('')
    $(this).tab('show');
    if (_active_tab == "pendings-tab" || _active_tab == "fractionated-tab") {
      show_cashier();
    } else {
      $("#cashier").hide();
      _cashier_shown = false;
    }
    enable_client_payment_amount(true);
  });

  // when .btn-payment (cash, bank, fractionated and others) clicked (register payment)
  $(".btn-payment").click(function(){
    var elements = $( "input:checked" );
    if (elements.length <= 0) return false;
    var invoices_id = [];
    var debts_array = [];
    for(var i=0;typeof(elements[i])!='undefined';invoices_id.push(elements[i++].getAttribute('value')));
    for(var i=0;typeof(elements[i])!='undefined';debts_array.push(elements[i++].getAttribute('data-debt')));
    var total_debt = 0.0;
    for (var i = 0; i < debts_array.length; i++) {
      if(debts_array[i] != null){
        total_debt += parseFloat(debts_array[i]);
      }
    }
    $(".debt-total").text(total_debt.format(2, 3, _delimiter, _separator));

    // Update Ids in the
    $("#client_payment_cash_invoices_ids").val(invoices_id.filter(i=>i!=null))    // cash
    $("#client_payment_other_invoices_ids").val(invoices_id.filter(i=>i!=null))   // others
    $("#client_payment_bank_invoices_ids").val(invoices_id.filter(i=>i!=null))    // bank
    $("#instalment_invoices_ids").val(invoices_id.filter(i=>i!=null))             // instalments
  });

  $(".btn-cash").click(function (e) {
    ids = $("#client_payment_cash_invoices_ids").val();
    if (ids == null || ids == '') {
      alert('¡Debes seleccionar recibos o facturas pendientes de cobrar!');
      return false;
    }
    $("#client_payment_cash_amount").val(0);
    $("#client_payment_cash_payment_method_id").select2("val", 0);
  });

  $(".btn-bank").click(function (e) {
    ids = $("#client_payment_bank_invoices_ids").val();
    if (ids == null || ids == '') {
      alert('¡Debes seleccionar recibos o facturas pendientes de cobrar!');
      return false;
    }
    $("#client_payment_bank_receipt_no").val("");
  });

  $(".btn-fractionated").click(function (e) {
    ids = $("#instalment_invoices_ids").val();
    if (ids == null || ids == '') {
      alert('¡Debes seleccionar recibos o facturas pendientes de cobrar!');
      return false;
    }
    $("#instalment_number_inst").val(1);
    $("#instalment_amount_first").val(0);
    $("#instalment_charge").val(0);
    $("#instalment_payment_method_id").select2("val", 0);
  });

  $(".btn-others").click(function (e) {
    ids = $("#client_payment_other_invoices_ids").val();
    if (ids == null || ids == '') {
      alert('¡Debes seleccionar recibos o facturas pendientes de cobrar!');
      return false;
    }
    $("#client_payment_other_amount").val(0);
    $("#client_payment_other_payment_method_id").select2("val", 0);
  });

  // All checked instalments to Bank
  $(".btn-bank-instalment").click(function (e) {
    var elements = $( "input:checked" );
    var invoices_id = [];
    var debts_array = [];
    for(var i=0;typeof(elements[i])!='undefined';invoices_id.push(elements[i++].getAttribute('value')));
    for(var i=0;typeof(elements[i])!='undefined';debts_array.push(elements[i++].getAttribute('data-debt')));
    var total_debt = 0.0;
    for (var i = 0; i < debts_array.length; i++) {
      if(debts_array[i] != null){
        total_debt += parseFloat(debts_array[i]);
      }
    }
    $(".debt-total").text(total_debt.format(2, 3, _delimiter, _separator));

    // Update Ids in Bank
    $("#client_payment_bank_ids").val(invoices_id.filter(i=>i!=null))
    if (invoices_id == null || invoices_id == '') {
      alert('¡Debes seleccionar plazos pendientes de cobrar!');
      return false;
    }
    $("#client_payment_bank_invoices_ids").val("");
    $("#client_payment_bank_receipt_no").val("");
  });

  $("#close-cash").click(function(){
    if ($("#cash-checkbox-master").prop('checked') != true) {
      $("#cash-checkbox-master").trigger("click");
    }
    var cp_ids = [];
    var cp_amount = 0.0;
    var initial = 0.0;
    var payments = 0.0;
    var others = 0.0;
    var ending = 0.0;
    $('#cash-table tr').each(function() {
      if ($(this).find('td input:checkbox').is(':checked')) {
        id = $(this).find('td.cp-id').text();
        if (id != null && id != '') {
          cp_ids.push(id);
          amount = $(this).find('td.cp-amount').text().replace(",", ".");
          cp_amount += parseFloat(amount);
        }
      }
    });
    if (cp_ids.length <= 0) {
      alert('¡Debes seleccionar cobros a confirmar!');
      return false;
    } else {
      $("#close_cash_client_payments_ids").val(cp_ids.filter(i => i!=null || i!=''))   // modal-cash
      $("#initial-cash").val("<%= @opening_balance %>");
      $("#bills-cash").html(cp_ids.length);
      $("#total-cash").html(cp_amount.format(2, 3, _delimiter, _separator));
      initial = parseFloat($("#initial-cash").val());
      payments = parseFloat($("#total-paid").text().replace(",", ".")) || 0.0;
      others = parseFloat($("#total-others").text().replace(",", ".")) || 0.0;
      ending = initial + cp_amount + payments + others;
      $("#ending-cash").html(ending.format(2, 3, _delimiter, _separator));
    }
  });

  $("#cash-to-pending").click(function(){
    var cp_ids = [];
    var cp_amount = 0.0;
    $('#cash-table tr').each(function() {
      if ($(this).find('td input:checkbox').is(':checked')) {
        id = $(this).find('td.cp-id').text();
        if (id != null && id != '') {
          cp_ids.push(id);
          amount = $(this).find('td.cp-amount').text().replace(",", ".");
          cp_amount += parseFloat(amount);
        }
      }
    });
    if (cp_ids.length <= 0) {
      alert('¡Debes seleccionar cobros a devolver!');
      return false;
    } else {
      $("#cash_to_pending_client_payments_ids").val(cp_ids.filter(i => i!=null || i!=''))   // modal-cash-to-pending
      $("#bills-cash-to-pending").html(cp_ids.length);
      $("#total-cash-to-pending").html(cp_amount.format(4, 3, _delimiter, _separator));
    }
  });

  $("#bank-confirm").click(function(){
    var cp_ids = [];
    var cp_amount = 0.0;
    $('#bank-table tr').each(function() {
      if ($(this).find('td input:checkbox').is(':checked')) {
        id = $(this).find('td.cpb-id').text();
        if (id != null && id != '') {
          cp_ids.push(id);
          amount = $(this).find('td.cpb-amount').text().replace(",", ".");
          cp_amount += parseFloat(amount);
        }
      }
    });
    if (cp_ids.length <= 0) {
      alert('¡Debes seleccionar cobros a confirmar!');
      return false;
    } else {
      $("#bank_confirm_client_payments_ids").val(cp_ids)   // modal-bank
      $("#bank-bills-selected").html(cp_ids.length);
      $("#bank-total-selected").html(cp_amount.format(4, 3, _delimiter, _separator));
    }
  });

  $("#bank-to-pending").click(function(){
    var cp_ids = [];
    var cp_amount = 0.0;
    $('#bank-table tr').each(function() {
      if ($(this).find('td input:checkbox').is(':checked')) {
        id = $(this).find('td.cpb-id').text();
        if (id != null && id != '') {
          cp_ids.push(id);
          amount = $(this).find('td.cpb-amount').text().replace(",", ".");
          cp_amount += parseFloat(amount);
        }
      }
    });
    if (cp_ids.length <= 0) {
      alert('¡Debes seleccionar cobros a devolver!');
      return false;
    } else {
      $("#bank_to_pending_client_payments_ids").val(cp_ids.filter(i => i!=null || i!=''))   // modal-bank-to-pending
      $("#bank-to-pending-bills-selected").html(cp_ids.length);
      $("#bank-to-pending-total-selected").html(cp_amount.format(4, 3, _delimiter, _separator));
    }
  });

  $("#bank-to-order").click(function(){
    var cp_ids = [];
    var cp_amount = 0.0;
    $('#bank-table tr').each(function() {
      if ($(this).find('td input:checkbox').is(':checked')) {
        id = $(this).find('td.cpb-id').text();
        if (id != null && id != '') {
          cp_ids.push(id);
          amount = $(this).find('td.cpb-amount').text().replace(",", ".");
          cp_amount += parseFloat(amount);
        }
      }
    });
    if (cp_ids.length <= 0) {
      alert('¡Debes seleccionar cobros a remesar!');
      return false;
    } else {
      $("#bank_to_order_client_payments_ids").val(cp_ids.filter(i => i!=null || i!=''))   // modal-bank-to-order
      $("#bank-to-order-bills-selected").html(cp_ids.length);
      $("#bank-to-order-total-selected").html(cp_amount.format(4, 3, _delimiter, _separator));
    }
  });

  $("#others-confirm").click(function(){
    var cp_ids = [];
    var cp_amount = 0.0;
    $('#others-table tr').each(function() {
      if ($(this).find('td input:checkbox').is(':checked')) {
        id = $(this).find('td.cpo-id').text();
        if (id != null && id != '') {
          cp_ids.push(id);
          amount = $(this).find('td.cpo-amount').text().replace(",", ".");
          cp_amount += parseFloat(amount);
        }
      }
    });
    if (cp_ids.length <= 0) {
      alert('¡Debes seleccionar cobros a confirmar!');
      return false;
    } else {
      $("#others_confirm_client_payments_ids").val(cp_ids)   // modal-others-confirm
      $("#others-bills-selected").html(cp_ids.length);
      $("#others-total-selected").html(cp_amount.format(4, 3, _delimiter, _separator));
    }
  });

  $("#others-to-pending").click(function(){
    var cp_ids = [];
    var cp_amount = 0.0;
    $('#others-table tr').each(function() {
      if ($(this).find('td input:checkbox').is(':checked')) {
        id = $(this).find('td.cpo-id').text();
        if (id != null && id != '') {
          cp_ids.push(id);
          amount = $(this).find('td.cpo-amount').text().replace(",", ".");
          cp_amount += parseFloat(amount);
        }
      }
    });
    if (cp_ids.length <= 0) {
      alert('¡Debes seleccionar cobros a devolver!');
      return false;
    } else {
      $("#others_to_pending_client_payments_ids").val(cp_ids.filter(i => i!=null || i!=''))   // modal-others-to-pending
      $("#others-to-pending-bills-selected").html(cp_ids.length);
      $("#others-to-pending-total-selected").html(cp_amount.format(4, 3, _delimiter, _separator));
    }
  });

  /***
  /* Forms submit
  ***/
  /* modal_cash form.client_payment: Check required values before submit */
  $("form.cash-form").submit(function(){
    if ($('#client_payment_cash_amount').val() == '' ||
        $('#client_payment_cash_amount').val() == null) {
      alert("<%= I18n.t('activerecord.attributes.client_payment.amount') %> <%= I18n.t(:item_error) %>");
      return false;
    }
    if ($('#client_payment_cash_payment_method_id').val() == '' ||
        $('#client_payment_cash_payment_method_id').val() == null) {
      alert("<%= I18n.t('activerecord.attributes.client_payment.payment_method_id') %> <%= I18n.t(:item_error) %>");
      return false;
    }
  });

  /* cashier form.client_payment: Check required values before submit */
  /* if debt < 0 => amount is disabled, so is 0 */
  $("form.cashier-form").submit(function() {
    var ids = null;
    var debt = parseFloat($('.debt-total-cashier').text().replace(",", "."));
    var amount = parseFloat($('#client_payment_amount').val());
    if (_active_tab == "pendings-tab") {
      ids = $("#client_payment_invoices_ids").val();
    } else if (_active_tab == "fractionated-tab") {
      ids = $("#client_payment_ids").val();
    }
    if (ids == null || ids == '') {
      alert('¡Debes seleccionar recibos, facturas o plazos pendientes de cobrar!');
      return false;
    }
    // Debt must be valid number
    if (isNaN(debt)) {
      alert("<%= I18n.t('activerecord.attributes.client_payment.to_collect') %> <%= I18n.t(:item_error) %>");
      return false;
    }
    // If debt greather than 0, amount must be valid number
    if (debt > 0 && (isNaN(amount) || amount <= 0)) {
      alert("<%= I18n.t('activerecord.attributes.client_payment.amount') %> <%= I18n.t(:item_error) %>");
      return false;
    }
    // If fractionanted, amount must be greater than or equal to debt
    if (_active_tab == "fractionated-tab" && amount < debt) {
      alert("<%= I18n.t('activerecord.attributes.client_payment.amount') %> <%= I18n.t(:item_amount_debt) %>");
      return false;
    }
    // Payment method must be valid
    if ($('#client_payment_payment_method_id').val() == '' ||
        $('#client_payment_payment_method_id').val() == null) {
      alert("<%= I18n.t('activerecord.attributes.client_payment.payment_method_id') %> <%= I18n.t(:item_error) %>");
      return false;
    }
  });

  /* modal_others form.client_payment_other: Check required values before submit */
  $("form.others-form").submit(function(){
    if ($('#client_payment_other_amount').val() == '' ||
        $('#client_payment_other_amount').val() == null) {
      alert("<%= I18n.t('activerecord.attributes.client_payment.amount') %> <%= I18n.t(:item_error) %>");
      return false;
    }
    if ($('#client_payment_other_payment_method_id').val() == '' ||
        $('#client_payment_other_payment_method_id').val() == null) {
      alert("<%= I18n.t('activerecord.attributes.client_payment.payment_method_id') %> <%= I18n.t(:item_error) %>");
      return false;
    }
  });

  /* modal_bank form.client_payment_bank: Check required values before submit */
  $("form.bank-form").submit(function(){
    if ($('#client_payment_bank_receipt_no').val() == '' ||
        $('#client_payment_bank_receipt_no').val() == null) {
      alert("<%= I18n.t('activerecord.attributes.client_payment.bank_order_no') %> <%= I18n.t(:item_error) %>");
      return false;
    }
  });

  $("form.bank_confirm").submit(function(){
   var $input = $(this).find("input[name='bank_confirm[ids]']");
   var elements = $( "input.checkbox-slave:checked" );
   var client_payment_ids = [];
   for(var i=0;typeof(elements[i])!='undefined';client_payment_ids.push(elements[i++].getAttribute('value')));
   $input.val(client_payment_ids);
  });

  /* modal_instalment form.instalment: Check required values before submit */
  $("form.instalment-form").submit(function(){
    if ($('#instalment_number_inst').val() == '' ||
        $('#instalment_number_inst').val() == null) {
      alert("<%= I18n.t('activerecord.attributes.instalment_plan.instalments_qty') %> <%= I18n.t(:item_error) %>");
      return false;
    }
    if ($('#instalment_amount_first').val() == '' ||
        $('#instalment_amount_first').val() == null) {
      alert("<%= I18n.t('activerecord.attributes.instalment_plan.amount_first') %> <%= I18n.t(:item_error) %>");
      return false;
    }
    if ($('#instalment_charge').val() == '' ||
        $('#instalment_charge').val() == null) {
      alert("<%= I18n.t('activerecord.attributes.instalment_plan.surcharge_pct') %> <%= I18n.t(:item_error) %>");
      return false;
    }
    if ($('#instalment_payment_method_id').val() == '' ||
        $('#instalment_payment_method_id').val() == null) {
      alert("<%= I18n.t('activerecord.attributes.instalment_plan.payment_method_id') %> <%= I18n.t(:item_error) %>");
      return false;
    }
  });

  $("form.payment_fractionated").submit(function(){
    var $input = $(this).find("input[name='payment_fractionated[ids]']");
    var elements = $( "input.checkbox-slave:checked" );
    var instalments_ids = [];
    for(var i=0;typeof(elements[i])!='undefined';instalments_ids.push(elements[i++].getAttribute('value')));
    $input.val(instalments_ids);
  });

  $("form.close-cash-form").submit(function() {
    sum_instruments = parseFloat($("#sum-instruments").text()) || 0;
    ending_cash = parseFloat($("#ending-cash").text()) || 0;
    if (_delimiter == '.') {  // es
      sum_instruments = parseFloat($("#sum-instruments").text().replace(".", "").replace(",", ".")) || 0;
      ending_cash = parseFloat($("#ending-cash").text().replace(".", "").replace(",", ".")) || 0;
    }
    instruments_difference = ending_cash - sum_instruments;
    if (sum_instruments != ending_cash) {
      var result = confirm("<%= t('activerecord.attributes.cash_desk_closing.instruments_neq_closing_question') %>");
      if (!result) {
        return false;
      }
      // alert("<%= I18n.t('activerecord.attributes.cash_desk_closing.instruments_neq_closing') %>");
      // return false;
    }
  });
  /*** End forms submit ***/

  $("#btn-close-modal-cash-close").click(function() {
    $("#cash-checkbox-master").trigger("click");
  });

  /***
  /* Manage checkboxes
  ***/
  // Item checkbox at pending & bank
  $(".checkbox-slave").click(function () {
     $(".checkbox-main").prop('checked', false)
     $(".checkbox-master-table").prop('checked', false)

     if (_cashier_shown) {
       var invoices_id = [];
       var i = 0;
       var val = $(this).attr('value');
       var p = $(this).prop('checked');
       var ids = $("#client_payment_invoices_ids").val();
       if (ids != null && ids != '') {
         invoices_id = ids.split(",");
       }
       var total_debt = parseFloat(right_number($(".debt-total-cashier").text(), 2));
       var debt = parseFloat($(this).attr('data-debt'));
       if (p) {
         // Add to ids
         invoices_id.push(val);
         // Sum at cashier
         total_debt += debt
       } else {
         // Remove from ids
         i = invoices_id.indexOf(val);
         if (i > -1) {
           invoices_id.splice(i, 1);
         }
         // Subtract at cashier
         total_debt -= debt
       }
       total_debt = Math.round(total_debt * 100) / 100
       $(".debt-total-cashier").text(total_debt.format(2, 3, _delimiter, _separator));
       $("#client_payment_invoices_ids").val(invoices_id.filter(i=>i!=null))
       if (total_debt == 0) $("#client_payment_amount").val('');
       enable_client_payment_amount(total_debt>=0);
       enable_pending_buttons(total_debt>=0);
       $('#client_payment_amount').trigger("change");
    }
  });

  // Table checkbox at pending: Updates slave
  $(".checkbox-master").click(function () {
    $(this).parents(".accordion").find("tbody").find("input[type=checkbox]:not(:disabled)").prop('checked', $(this).prop('checked'));
    $(".checkbox-main").prop('checked', false)

    // Totalize and assign to cashier
    if (_cashier_shown) {
      var invoices_id = [];
      var i = 0;
      var val = null;
      var chk = null;
      var p = $(this).prop('checked');
      var ids = $("#client_payment_invoices_ids").val();
      if (ids != null && ids != '') {
        invoices_id = ids.split(",");
      }
      var total_debt = parseFloat(right_number($(".debt-total-cashier").text(), 2));
      var debt = 0;
      $(this).parents(".accordion").find(".pending-invoices-table").find("tr.fields").each(function() {
        chk = $(this).find('.checkbox-slave');
        if (chk.is(':enabled')) {
          val = chk.attr('value');
          if (chk.prop('checked')) {
            // Add to ids
            invoices_id.push(val);
          } else {
            // Remove from ids
            i = invoices_id.indexOf(val);
            if (i > -1) {
              invoices_id.splice(i, 1);
            }
          }
          debt += parseFloat(right_number($(this).find('.debt-field').text(), 4));
        }
      });
      if (p) {
        // Sum at cashier
        total_debt += debt
      } else {
        // Subtract at cashier
        total_debt -= debt
      }
      total_debt = Math.round(total_debt * 100) / 100
      $(".debt-total-cashier").text(total_debt.format(2, 3, _delimiter, _separator));
      $("#client_payment_invoices_ids").val(invoices_id.filter(i=>i!=null))
      if (total_debt == 0) $("#client_payment_amount").val('');
      enable_client_payment_amount(total_debt>=0);
      enable_pending_buttons(total_debt>=0);
      $('#client_payment_amount').trigger("change");
    }
  });

  // Global checkbox at pending: Updates master & slave
  $(".checkbox-main").click(function () {
    $(".checkbox-slave:not(:disabled), .checkbox-master:not(:disabled)").prop('checked', $(this).prop('checked'));

    // Totalize and assign to cashier
    if (_cashier_shown) {
      var invoices_id = [];
      var i = 0;
      var val = null;
      var chk = null;
      var p = $(this).prop('checked');
      $("#client_payment_invoices_ids").val(invoices_id.filter(i=>i!=null))
      var debt = 0;
      $(this).parents(".pendings").find(".accordion").find(".pending-invoices-table").find("tr.fields").each(function() {
        chk = $(this).find('.checkbox-slave');
        if (chk.is(':enabled')) {
          val = chk.attr('value');
          if (chk.prop('checked')) {
            // Add to ids
            invoices_id.push(val);
            // Sum
            debt += parseFloat(right_number($(this).find('.debt-field').text(), 4));
          }
        }
      });
      debt = Math.round(debt * 100) / 100
      $(".debt-total-cashier").text(debt.format(2, 3, _delimiter, _separator));
      $("#client_payment_invoices_ids").val(invoices_id.filter(i=>i!=null))
      if (debt == 0) $("#client_payment_amount").val('');
      enable_client_payment_amount(debt>=0);
      enable_pending_buttons(debt>=0);
      $('#client_payment_amount').trigger("change");
    }
  });

  // Table checkbox at bank
  $(".checkbox-master-table").click(function () {
    $(this).parents(".table").find("tbody").find("input[type=checkbox]").prop('checked', $(this).prop('checked'));
  });

  // Item checkbox at cash
  $(".cash-checkbox-slave").click(function () {
    $("#cash-checkbox-master").prop('checked', false)
  });

  // Table checkbox at cash: Updates slave
  $("#cash-checkbox-master").click(function () {
    $(".cash-checkbox-slave").prop('checked', $(this).prop('checked'));
  });

  // Item checkbox at other
  $(".other-checkbox-slave").click(function () {
    $("#other-checkbox-master").prop('checked', false)
  });

  // Table checkbox at other: Updates slave
  $("#other-checkbox-master").click(function () {
    $(".other-checkbox-slave").prop('checked', $(this).prop('checked'));
  });

  // Item checkbox at instalment
  $(".instalment-checkbox-slave").click(function () {
    $("#instalments-checkbox-master").prop('checked', false)
    $(".checkbox-main").prop('checked', false)

    if (_cashier_shown) {
      var invoices_id = [];
      var i = 0;
      var val = $(this).attr('value');
      var p = $(this).prop('checked');
      var ids = $("#client_payment_ids").val();
      if (ids != null && ids != '') {
       invoices_id = ids.split(",");
      }
      var total_debt = parseFloat(right_number($(".debt-total-cashier").text(), 2));
      var debt = parseFloat($(this).attr('data-debt'));
      if (p) {
       // Add to ids
       invoices_id.push(val);
       // Sum at cashier
       total_debt += debt
      } else {
       // Remove from ids
       i = invoices_id.indexOf(val);
       if (i > -1) {
         invoices_id.splice(i, 1);
       }
       // Subtract at cashier
       total_debt -= debt
      }
      total_debt = Math.round(total_debt * 100) / 100
      $(".debt-total-cashier").text(total_debt.format(2, 3, _delimiter, _separator));
      $("#client_payment_ids").val(invoices_id.filter(i=>i!=null))
      $('#client_payment_amount').trigger("change");
    }
  });

  // Table checkbox at instalment: Updates slave
  $("#instalments-checkbox-master").click(function () {
    $(".instalment-checkbox-slave").prop('checked', $(this).prop('checked'));

    // Totalize and assign to cashier
    if (_cashier_shown) {
      var invoices_id = [];
      var i = 0;
      var val = null;
      var chk = null;
      var p = $(this).prop('checked');
      $("#client_payment_ids").val(invoices_id.filter(i=>i!=null))
      var debt = 0;
      $(this).parents("#fractionated").find(".accordion").find("#instalments-table").find("tr.fields").each(function() {
        chk = $(this).find('.instalment-checkbox-slave');
        if (chk.is(':enabled')) {
          val = chk.attr('value');
          if (chk.prop('checked')) {
            // Add to ids
            invoices_id.push(val);
            // Sum
            debt += parseFloat(right_number($(this).find('.debt-field').text(), 4));
          }
        }
      });
      debt = Math.round(debt * 100) / 100
      $(".debt-total-cashier").text(debt.format(2, 3, _delimiter, _separator));
      $("#client_payment_ids").val(invoices_id.filter(i=>i!=null))
      if (debt == 0) {
        $("#client_payment_amount").val('');
      }
      $('#client_payment_amount').trigger("change");
    }
  });
  /*** End manage checkboxes ***/

  $("#client_payment_cash_amount").change(function() {
    amount = parseFloat(this.value) || 0;
    debt = parseFloat($(this).parents(".modal").find(".debt-total").text().replace(",", ".")) || 0;
    cash_return = debt - amount;
    $(".cash-return").text(cash_return.format(2, 3, _delimiter, _separator));
  });

  $("#client_payment_amount").change(function() {
    var cash_return = 0;
    var ids = null;
    if (_active_tab == "pendings-tab") {
      ids = $("#client_payment_invoices_ids").val();
    } else if (_active_tab == "fractionated-tab") {
      ids = $("#client_payment_ids").val();
    }
    if (ids != null && ids != '') {
      amount = parseFloat(this.value) || 0;
      debt = parseFloat($(this).parents("#cashier-table").find(".debt-total-cashier").text().replace(",", ".")) || 0;
      cash_return = debt - amount;
      if (cash_return < 0 && debt > 0) {
        cash_return = cash_return * (-1);
      } else {
        cash_return = 0;
      }
    }
    $(".cash-return-cashier").text(cash_return.format(2, 3, _delimiter, _separator));
  });

  $("#initial-cash").change(function() {
    initial = parseFloat(this.value)
    cashed = parseFloat($("#total-cash").text().replace(",", ".")) || 0.0;
    ending = initial + cashed
    payments = parseFloat($("#total-paid").text().replace(",", ".")) || 0.0;
    others = parseFloat($("#total-others").text().replace(",", ".")) || 0.0;
    ending = initial + cashed + payments + others;
    $("#ending-cash").text(ending.format(2, 3, _delimiter, _separator));
  });

  $(".fnt-currency-quantity").change(function() {
    sum_instruments = parseFloat($("#sum-instruments").text()) || 0;
    if (_delimiter == '.') {  // es
      sum_instruments = parseFloat($("#sum-instruments").text().replace(".", "").replace(",", ".")) || 0;
    }
    ival = parseFloat($(this).attr("data-ival")) || 0;
    old_qty = parseFloat(this.oldvalue) || 0;
    sum_instruments = sum_instruments - (old_qty * ival);
    qty = parseFloat(this.value) || 0;
    sum_instruments = sum_instruments + (qty * ival);
    $("#sum-instruments").text(sum_instruments.format(2, 3, _delimiter, _separator));
  });

  $("#btn-currency-reset").click(function (e) {
    sum_instruments = 0;
    $("#sum-instruments").text(sum_instruments.format(2, 3, _delimiter, _separator));
    $('.fnt-currency-quantity').val(0);
    return false;
  });

  // Tab navigation
  $("#pendings-tab").click(function() {
    $('#active_tab').val('pendings-tab');
  });
  $("#charged-tab").click(function() {
    $('#active_tab').val('charged-tab');
  });
  $("#others-tab").click(function() {
    $('#active_tab').val('others-tab');
  });
  $("#fractionated-tab").click(function() {
    $('#active_tab').val('fractionated-tab');
  });
  $("#banks-tab").click(function() {
    $('#active_tab').val('banks-tab');
  });
  $("#cash-tab").click(function() {
    $('#active_tab').val('cash-tab');
  });

  /***
  /* Show cash, bank, deferrals or others, by 10 rows per page or one-all single page
  ***/
  $("#cash-all").click(function() {
    var all = $(this).prop('checked')
    jQuery.getJSON('reload_current_search/cash/' + all, function(data) {
      $('#per_page_cash').val(data.per_page);
      $("#submit_btn").trigger("click");
    });
  });

  $("#bank-all").click(function() {
    var all = $(this).prop('checked')
    jQuery.getJSON('reload_current_search/bank/' + all, function(data) {
      $('#per_page_bank').val(data.per_page);
      $("#submit_btn").trigger("click");
    });
  });

  $("#instalment-all").click(function() {
    var all = $(this).prop('checked')
    jQuery.getJSON('reload_current_search/instalment/' + all, function(data) {
      $('#per_page_deferrals').val(data.per_page);
      $("#submit_btn").trigger("click");
    });
  });

  $("#other-all").click(function() {
    var all = $(this).prop('checked')
    jQuery.getJSON('reload_current_search/other/' + all, function(data) {
      $('#per_page_others').val(data.per_page);
      $("#submit_btn").trigger("click");
    });
  });
</script>

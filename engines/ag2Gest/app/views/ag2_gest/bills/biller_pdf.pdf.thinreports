if @biller_printer.blank?
	return
end

# Localization for numbers
delimiter = I18n.locale == :es ? "." : ","

report.set_layout tlf: 'reports/invoice_form', layout_options: { default: true }


# New page & start
report.start_new_page

# Page header: Image block for Logo
report.page.values company_logo: "public/" + @biller_printer.project.company.logo.url(:original).split("?").first unless @biller_printer.project.company.logo.blank?

# Page footer: Image block for Logo
report.page.values logo_small: "public/" + @biller_printer.project.company.logo.url(:small).split("?").first unless @biller_printer.project.company.logo.blank?

# Page header: Company
report.page.values(company_name: @biller_printer.project.company.name,
				   company_address_1: @biller_printer.project.company.address_1,
				   company_address_2: @biller_printer.project.company.address_2,
				   company_phones: @biller_printer.project.company.phone_and_fax,
				   company_email: @biller_printer.project.company.email_and_website
				   )
report.page.values(company_data: (@biller_printer.project.company.invoice_footer_complete + "/r90"))
#
# Remarks

report.page.values(currency_note: "* " + I18n.t("every_report.currency_note"),
				   remark: "* " + I18n.t("activerecord.attributes.report.remark"))

#
# Lists
var_bill_date = @biller_printer.bill_date.strftime("%d/%m/%Y") unless @biller_printer.bill_date.blank?
var_payday_limit = @biller_printer.invoices.first.payday_limit.strftime("%d/%m/%Y") unless @biller_printer.invoices.first.payday_limit.blank?
#
report.page.values(bill_c: I18n.t("activerecord.attributes.contracting_request.bill"),
				   data_client_c: I18n.t("activerecord.attributes.contracting_request.data_client"),
				   bill_n_c:  I18n.t("activerecord.models.bill.one") + " " + I18n.t("activerecord.attributes.bill.bill_no"),
				   bill_n: @biller_printer.try(:to_label),
				   bill_date_c: I18n.t("activerecord.attributes.bill.bill_date"),
				   bill_date: var_bill_date,
				   billing_period_c: I18n.t("activerecord.attributes.report.billing_period"),
				   billing_period: @biller_printer.try(:invoices).first.try(:billing_period).try(:to_label),
				   payday_limit_c: I18n.t("ag2_gest.bills.index.payday_limit"),
				   payday_limit: var_payday_limit,
				   client_code_c: I18n.t("activerecord.attributes.report.client_code") + ": ",
				   client_code: @biller_printer.subscriber.full_code,
				   client_c: I18n.t("activerecord.attributes.subscriber.titular") + ": ",
				   client: @biller_printer.subscriber.full_name.upcase,
				   street_c: I18n.t("activerecord.report.subscriber.direction") + ": ",
				   street: @biller_printer.try(:subscriber).try(:address_1).upcase,
				   zipcode: @biller_printer.try(:subscriber).try(:address_2).upcase,
				   client_code2: @biller_printer.subscriber.full_code,
				   client2:  @biller_printer.client.full_name.upcase,
				   street2: @biller_printer.try(:client).try(:address_1).upcase,
				   zipcode2: @biller_printer.try(:client).try(:zipcode).try(:zipcode).upcase + " " + @biller_printer.try(:client).try(:zipcode).try(:town).try(:name).upcase,
				   province: @biller_printer.try(:client).try(:zipcode).try(:province).try(:name).upcase
				   )
#
reading_a = @biller_printer.reading_1.reading_date.strftime("%d/%m/%Y") unless @biller_printer.reading_1.blank?
reading_b = @biller_printer.reading_2.reading_date.strftime("%d/%m/%Y") unless @biller_printer.reading_2.blank?
# supply_data
report.page.values(supply_data_c: I18n.t("activerecord.attributes.contracting_request.supply_data"),
				   data_meter_c: I18n.t("activerecord.attributes.contracting_request.data_meter"),
				   consumption_data_c: I18n.t("activerecord.attributes.contracting_request.consumption_data"),
				   fiscal_id_c: I18n.t("activerecord.attributes.subscriber.fiscal_id_c") + ": ",
				   fiscal_id: @biller_printer.try(:subscriber).try(:fiscal_id),
				   use_c: I18n.t("activerecord.attributes.subscriber.use") + ": ",
				   use: @biller_printer.try(:subscriber).try(:use).try(:name),
				   meter_code_c: I18n.t("activerecord.attributes.meter.meter_code") + ": ",
				   meter_code: @biller_printer.try(:subscriber).try(:meter).try(:meter_code),
				   caliber_c: I18n.t("activerecord.attributes.subscriber.caliber") + ": ",
				   caliber: @biller_printer.try(:subscriber).try(:meter).try(:caliber).try(:caliber),
				   lec_ant_c: I18n.t("activerecord.attributes.reading.lec_ant") + ": ",
				   lec_ant: @biller_printer.try(:reading_1).try(:reading_index),
				   lec_act_c: I18n.t("activerecord.attributes.reading.lec_act") + ": ",
				   lec_act: @biller_printer.try(:reading_2).try(:reading_index),
				   date_c: I18n.t("activerecord.attributes.reading.reading_date") + ": ",
				   date: reading_a,
				   date_c2: I18n.t("activerecord.attributes.reading.reading_date") + ": ",
				   date2: reading_b,
				   reg_c: I18n.t("activerecord.attributes.reading.reg") + ": ",
				   reg: @biller_printer.try(:invoices).try(:first).try(:consumption_real),
				   est_c: I18n.t("activerecord.attributes.reading.est") + ": ",
				   est: @biller_printer.try(:invoices).try(:first).try(:consumption_estimated),
				   other_c: I18n.t("activerecord.attributes.reading.other") + ": ",
				   other: @biller_printer.try(:invoices).try(:first).try(:consumption_other),
				   fac_c: I18n.t("activerecord.attributes.reading.fac") + ": ",
				   fac: @biller_printer.try(:invoices).try(:first).try(:consumption),
				   con_c: I18n.t("activerecord.attributes.reading.con") + ": ",
				   con: ""
				   )
#
# tariff
report.page.values(tariff_data_c: I18n.t("activerecord.models.tariff.zero"))
#
# billing
report.page.values(billing_c: I18n.t("activerecord.attributes.contracting_request.billing"))				   
#
report.layout.config.list(:default) do |c|
	# On list page footer insertion
	c.events.on :page_footer_insert do |e|
		# Display page sutotals
		e.section.item(:total_c).value(I18n.t("activerecord.attributes.bill.total"))
		e.section.item(:total).value number_with_precision(@biller_printer.invoices.first.total, precision: 2, delimiter: I18n.locale == :es ? "." : ",") unless @biller_printer.total.blank?
	end
end
#
report.page.list(:default).header do |header|
	header.item(:title2).value I18n.t("activerecord.models.invoice.one") + " de " + @biller_printer.invoices.first.try(:invoice_type).try(:name)
	header.item(:bill_no_c).value I18n.t("activerecord.models.invoice.one") + " " + I18n.t("activerecord.attributes.bill.bill_no")
	header.item(:bill_no).value @biller_printer.invoices.first.try(:full_no)
	header.item(:bill_date_c).value I18n.t("activerecord.attributes.bill.bill_date")
	header.item(:bill_date).value var_bill_date
end
#
# Factura
#
a = @biller_printer.invoices.first
	a.invoiced_subtotals_by_concept.each do |sub_concept|
		report.page.list(:default).add_row do |row|
			row.item(:tariff).value I18n.t("activerecord.attributes.contracting_request.amount_title") + sub_concept[1]
			row.item(:price).value number_with_precision(sub_concept[2], precision: 2, delimiter: I18n.locale == :es ? "." : ",")
		end
	end
	a.invoice_items.group(:tariff_id).each do |i|
		report.page.list(:tariff_list).add_row do |row|
				row.item(:tariff).value i.tariff.billable_item.regulation.regulation_type.description + " " + i.tariff.billable_item.regulation.description + " " + i.tariff.billable_item.regulation.starting_at.strftime("%d/%m/%Y") unless i.tariff.billable_item.regulation.blank?
		end
	end
	report.page.list(:default).add_row do |row|
		row.item(:subtotal_c).value (I18n.t("activerecord.attributes.bill.subtotal"))
		row.item(:subtotal).value  number_with_precision(a.subtotal, precision: 2, delimiter: I18n.locale == :es ? "." : ",") unless a.subtotal.blank?
	end
	a.tax_breakdown.each do |tax|
		if tax[0] == 0
		else
			report.page.list(:default).add_row do |row|
				row.item(:iva_c).value I18n.t("activerecord.attributes.contracting_request.iva_c") + " " + "(#{tax[0]}%" + " de " + number_with_precision(tax[1], precision: 2) + ")"
				row.item(:iva).value number_with_precision(tax[2], precision: 2)
			end
		end
	end	
#
#
var_invoice_first_date = @biller_printer.invoices.first.invoice_date.strftime("%d/%m/%Y") unless @biller_printer.invoices.first.invoice_date.blank?
var_invoice_first_limit = @biller_printer.invoices.first.payday_limit.strftime("%d/%m/%Y") unless @biller_printer.invoices.first.payday_limit.blank?
if @biller_printer.project.company.company_bank_accounts.first.blank?
	var_issuer = @biller_printer.project.company.fiscal_id[1..9]
else
	var_issuer = @biller_printer.project.company.fiscal_id[1..9] + @biller_printer.project.company.company_bank_accounts.first.bank_suffix
end
if !@biller_printer.project.company.company_bank_accounts.first.blank? && @biller_printer.project.company.company_bank_accounts.first.bank_suffix < "500" 
	var_ident = @biller_printer.subscriber.subscriber_code[5..10]
else
	var_ident = @biller_printer.invoices.first.payday_limit.strftime('%d%m%y') unless @biller_printer.invoices.first.payday_limit.blank?
end
# payment_data
var_client_bank = ClientBankAccount.where(subscriber_id: @biller_printer.subscriber_id,ending_at: nil)
var_client_bank_full = var_client_bank.first.p_format_hiden_account unless var_client_bank.blank?
#
report.page.values(loc_fiscal_c: I18n.t("activerecord.report.biller.loc_fiscal") + ": ",
				   loc_fiscal: @biller_printer.project.company.fiscal_id,
				   payment_data_c: I18n.t("activerecord.attributes.contracting_request.payment_data"),
				   pay_sp_c:  I18n.t("activerecord.attributes.water_supply_contract.supply_number") + ": ",
				   pay_sp: @biller_printer.subscriber.full_code,
				   pay_bill_n_c:  I18n.t("activerecord.models.bill.one") + " " + I18n.t("activerecord.attributes.bill.bill_no") + ": ",
				   pay_bill_n: @biller_printer.try(:to_label),
				   pay_date_c: I18n.t("activerecord.attributes.bill.bill_date"),
				   pay_date: var_bill_date,
				   pay_client_c: I18n.t("activerecord.attributes.subscriber.titular") + ": ",
				   pay_client: @biller_printer.subscriber.full_name.upcase,
				   pay_bank_c: I18n.t("activerecord.models.client_bank_account.one") + ": ",
				   pay_bank: var_client_bank_full,
				   pay_emi_c: I18n.t("activerecord.attributes.bill.issuer").upcase,
				   pay_emi: var_issuer,
				   pay_ref_c: I18n.t("activerecord.attributes.work_order_item.code").upcase,
				   pay_ref: @biller_printer.invoices.first.invoice_no[3..15],
				   pay_ident_c: I18n.t("activerecord.attributes.bill.ident").upcase,
				   pay_ident: var_ident,
				   pay_sum_c: I18n.t("activerecord.attributes.billable_concept.supply").upcase,
				   pay_sum: @biller_printer.subscriber.subscriber_code[3..15],
				   pay_date_limit_c: I18n.t("ag2_gest.bills.index.payday_limit").upcase,
				   pay_date_limit: var_invoice_first_limit,
				   pay_total_c: I18n.t("activerecord.attributes.bill.total").upcase,
				   pay_total: number_with_precision(@biller_printer.total, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
				   )
#
#
# OTHER INVOICE
#
#
#
if !@biller_printer.invoices.second.blank?
var_invoice_date = @biller_printer.invoices.second.invoice_date.strftime("%d/%m/%Y") unless @biller_printer.invoices.second.invoice_date.blank?
var_invoice_limit = @biller_printer.invoices.second.payday_limit.strftime("%d/%m/%Y") unless @biller_printer.invoices.second.payday_limit.blank?
#
	report.layout.config.list(:other_invoice) do |c|
		# On list page footer insertion
		c.events.on :page_footer_insert do |e|
			# Display page sutotals
			e.section.item(:total_c).value(I18n.t("activerecord.attributes.bill.total"))
			e.section.item(:total).value number_with_precision(@biller_printer.invoices.second.total, precision: 2, delimiter: I18n.locale == :es ? "." : ",") unless @biller_printer.invoices.second.total.blank?
		end
	end
	report.page.list(:other_invoice).header do |header|
		header.item(:title2).value I18n.t("activerecord.models.invoice.one") + " de " + @biller_printer.invoices.second.try(:invoice_items).first.try(:description).capitalize
		header.item(:bill_no_c).value I18n.t("activerecord.models.invoice.one") + " " + I18n.t("activerecord.attributes.bill.bill_no")
		header.item(:bill_no).value @biller_printer.invoices.second.try(:full_no)
		header.item(:bill_date_c).value I18n.t("activerecord.attributes.bill.bill_date")
		header.item(:bill_date).value var_invoice_date
		header.item(:payday_limit_c).value I18n.t("ag2_gest.bills.index.payday_limit")
		header.item(:payday_limit).value  var_invoice_limit
		header.item(:biller).value @biller_printer.invoices.second.biller.name
		header.item(:biller_street).value @biller_printer.invoices.second.biller.address_1 + @biller_printer.invoices.second.biller.address_2
	end
	var_concept = " "
		@biller_printer.invoices.second.invoice_items.each do |item|
			report.page.list(:other_invoice).add_row do |row|
					if item.try(:description) != var_concept
						row.item(:concept).value item.try(:description).upcase
					end
					row.item(:items).value item.subcode_name
					row.item(:measure).value item.try(:measure).try(:description)
					row.item(:quantity).value number_with_precision(item.quantity, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
					row.item(:price).value number_with_precision(item.price, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
					row.item(:amount).value number_with_precision(item.amount, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
					var_concept = item.try(:description)
			end
		end
		report.page.list(:other_invoice).add_row do |row|
			row.item(:subtotal_c).value (I18n.t("activerecord.attributes.bill.subtotal"))
			row.item(:subtotal).value  number_with_precision(@biller_printer.invoices.second.subtotal, precision: 2, delimiter: I18n.locale == :es ? "." : ",") unless @biller_printer.invoices.second.subtotal.blank?
		end
		@biller_printer.invoices.second.tax_breakdown.each do |tax|
			if tax[0] == 0
			else
	 			report.page.list(:other_invoice).add_row do |row|
					row.item(:iva_c).value I18n.t("activerecord.attributes.contracting_request.iva_c") + " " + "(#{tax[0]}%" + " de " + number_with_precision(tax[1], precision: 2) + ")"
					row.item(:iva).value number_with_precision(tax[2], precision: 2)
				end
			end
		end
end
#
# TOTAL BILL AND DEBT
report.page.values(total_billing_c: I18n.t("activerecord.attributes.bill.total") + " " + I18n.t("activerecord.models.bill.one"),
				   total_billing: number_with_precision(@biller_printer.total, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
				   )
if @biller_printer.debt != 0
	report.page.values(total_debt_c: I18n.t("activerecord.attributes.report.debt_c"),
				   total_debt: number_with_precision(@biller_printer.debt, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
				   )
end
#
#
# DESGLOSE
#
#
report.set_layout tlf: 'reports/desglose', layout_options: { default: true }


# New page & start
report.start_new_page

report.page.list(:default).header do |header|
	header.item(:title).value I18n.t("activerecord.attributes.report.detail").upcase
	header.item(:concept_c).value I18n.t("activerecord.attributes.invoice_item.description")
	header.item(:measure_c).value I18n.t("activerecord.attributes.invoice_item.measure_c")
	header.item(:quantity_c).value I18n.t("activerecord.attributes.invoice_item.quantity_c")
	header.item(:price_c).value I18n.t("activerecord.attributes.invoice_item.price_c")
	header.item(:amount_c).value I18n.t("activerecord.attributes.invoice_item.amount_c")
end

	var_concept = " "
		@biller_printer.invoices.first.invoice_items.each do |item|
			report.page.list(:default).add_row do |row|
				if item.try(:description) != var_concept
					row.item(:concept).value item.try(:description).upcase 
				else
					row.item(:concept).hide
				end
				row.item(:subcode).value item.subcode_name
				row.item(:measure).value item.try(:measure).try(:description)
				row.item(:quantity).value number_with_precision(item.quantity, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
				row.item(:price).value number_with_precision(item.price, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
				row.item(:amount).value number_with_precision(item.amount, precision: 2, delimiter: I18n.locale == :es ? "." : ",")
				var_concept = item.try(:description)
			end
		end
#		
#



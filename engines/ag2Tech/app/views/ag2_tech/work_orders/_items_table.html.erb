<script>
  var _f = '';
  var _s = "0";

  $(document).ready(function() {
    $('.isel2').select2({
      formatNoMatches: function(m) { return '<%= I18n.t("select2.no_matches") %>'; },
      dropdownCssClass: 'shrinked',
      dropdownAutoWidth: true,
      containerCssClass: 'sub-select2-field'
    });

    // Retrieves parent values
    _f = $(".fnt-product").closest('form')[0];
    _s = $('select#work_order_store_id :selected').val();

    // Trigger to display totals at table foot
    $('#items-table').bind('totals', function(event) {
      // Sum necessary values from table rows
      var qty = 0;
      var costs = 0;
      var amount = 0;
      var tax = 0;
      $('#items-table tr.fields:visible').each(function() {
        qty += parseFloat(right_number($(this).find('input.fnt-quantity').val(), 4));
        costs += parseFloat(right_number($(this).find('input.fnt-costs').val(), 4));
        amount += parseFloat(right_number($(this).find('input.fnt-amount').val(), 4));
        tax += parseFloat(right_number($(this).find('input.fnt-tax').val(), 4));
      });
      qty = parseInt(right_number(qty.toString(), 4) * 10000);
      costs = parseInt(right_number(costs.toString(), 4) * 10000);
      amount = parseInt(right_number(amount.toString(), 4) * 10000);
      tax = parseInt(right_number(tax.toString(), 4) * 10000);
      jQuery.getJSON('wo_item_totals/' + qty + '/' + amount + '/' + costs + '/' + tax, function(data) {
        document.getElementById('foot-quantity').innerHTML = data.qty;
        document.getElementById('foot-costs').innerHTML = data.costs;
        document.getElementById('foot-amount').innerHTML = data.amount;
        document.getElementById('foot-taxable').innerHTML = data.taxable;
        document.getElementById('foot-tax').innerHTML = data.tax;
        document.getElementById('foot-total').innerHTML = data.total;
      });
    });
    // Update and display totals
    $('#items-table').trigger('totals');
  }); 

  jQuery(function($) {
    // when the .fnt-product field changes
    $(".fnt-product").change(function() {
      // preserve the current object
      var _this = (this);
      // make a POST call and replace the content
      var tbl = true;
      var product = $(this).closest('tr').find('.fnt-product').val();
      if (product == "")
        product = "0";
      var qty = $(this).closest('tr').find('.fnt-quantity').val();
      if (qty == "")
        qty = "0";
      // Right formatted for passing as REST parameter
      qty = parseInt(right_number(qty, 4) * 10000);
      jQuery.getJSON('wo_update_description_prices_from_product/' + product + '/' + qty + '/' + _s + '/' + tbl, function(data) {
        $(_this).closest('tr').find('.fnt-description').val(data.description);
        $(_this).closest('tr').find('.fnt-cost').val(data.cost);
        $(_this).closest('tr').find('.fnt-costs').val(data.costs);
        $(_this).closest('tr').find('.fnt-price').val(data.price);
        $(_this).closest('tr').find('.fnt-amount').val(data.amount);
        $(_this).closest('tr').find(".fnt-tax-type").val(data.type);
        $(_this).closest('tr').find('.fnt-tax').val(data.tax);
        // Update and display totals is necessary
        $('#items-table').trigger('totals');
      });
      return false;
    });

    // when the .fnt-quantity field changes
    $(".fnt-quantity").change(function() {
      // preserve the current object
      var _this = (this);
      recalculate_woi_table(_this);
      return false;
    });

    // when the .fnt-price field changes
    $(".fnt-price").change(function() {
      // preserve the current object
      var _this = (this);
      recalculate_woi_table(_this);
      return false;
    });

    // when the .fnt-cost field changes
    $(".fnt-cost").change(function() {
      // preserve the current object
      var _this = (this);
      recalculate_woi_table(_this);
      return false;
    });
    
    // Recalculate amounts & prices
    function recalculate_woi_table(_this) {
      // make a POST call and replace the content
      var tbl = true;
      var cost = $(_this).closest('tr').find('.fnt-cost').val();
      if (cost == "")
        cost = "0";
      var price = $(_this).closest('tr').find('.fnt-price').val();
      if (price == "")
        price = "0";
      var qty = $(_this).closest('tr').find('.fnt-quantity').val();
      if (qty == "")
        qty = "0";
      var tax_type = $(_this).closest('tr').find('.fnt-tax-type').val();
      if (tax_type == "")
        tax_type = "0";
      var product = $(_this).closest('tr').find('.fnt-product').val();
      if (product == "")
        product = "0";
      // Right formatted for passing as REST parameter
      cost = parseInt(right_number(cost, 4) * 10000);
      price = parseInt(right_number(price, 4) * 10000);
      qty = parseInt(right_number(qty, 4) * 10000);
      jQuery.getJSON('wo_update_amount_and_costs_from_price_or_quantity/' + cost + '/' + price + '/' + qty + '/' + tax_type + '/' + product + "/" + tbl, function(data) {
        $(_this).closest('tr').find('.fnt-quantity').val(data.quantity);
        $(_this).closest('tr').find('.fnt-cost').val(data.cost);
        $(_this).closest('tr').find('.fnt-costs').val(data.costs);
        $(_this).closest('tr').find('.fnt-price').val(data.price);
        $(_this).closest('tr').find('.fnt-amount').val(data.amount);
        $(_this).closest('tr').find('.fnt-tax').val(data.tax);
        // Update and display totals
        $('#items-table').trigger('totals');
      });
    }

    /*
     * Very special function!
     * This one re-calculate table totals after delete an item
     * When the .icon-trash clicked
     * Replace behavior of link_to_remove_fields
     * (the same was done in nested_wo.js)
     */
    $(".icon-trash").click(function() {
      remove_fields(this);
      // Update and display totals
      $('#items-table').trigger('totals');
    });
  });
</script>

<table id="items-table" class="table table-condensed table-striped shrinked fixed">
  <!-- product -->
  <col width="0%" />
  <col width="16%" />
  <!-- description -->
  <col width="25%" />
  <!-- quantity -->
  <col width="9%" />
  <!-- cost -->
  <col width="9%" />
  <!-- costs -->
  <col width="9%" />
  <!-- price -->
  <col width="9%" />
  <!-- amount -->
  <col width="9%" />
  <!-- tax -->
  <col width="9%" />
  <!-- button -->
  <col width="5%" />
  <thead>
    <%= render 'items_header' %>
  </thead>
  <tfoot>
    <%= render 'items_table_footer', f: f %>
  </tfoot>
  <tbody>
    <%= f.simple_fields_for :work_order_items, defaults: { input_html: { class: 'sub-form' } } do |i| %>
    <tr class="fields">
      <td><%= i.input :product_id, label: false, wrapper: false, as: :hidden, input_html: { class: 'sub-alfanumeric-text-field sub-disabled-field fnt-product' } %></td>
      <td><%= i.input :thing, readonly: true, label: false, wrapper: false, as: :string, input_html: { value: (i.object.product.full_name if i.object.product_id), class: 'iconify_item sub-alfanumeric-text-field sub-disabled-field fnt-thing' } %></td>
      <td><%= i.input :description, label: false, wrapper: false, input_html: { onkeyup: "caps(this)", class: 'sub-alfanumeric-text-field fnt-description', maxlength: 40 } %></td>
      <td><%= i.input :quantity, label: false, wrapper: false, as: :string, input_html: { value: (number_with_precision(i.object.quantity, precision: 4) if i.object.quantity), class: 'sub-number-text-field fnt-quantity' } %></td>
      <td><%= i.input :cost, label: false, wrapper: false, as: :string, input_html: { value: (number_with_precision(i.object.cost, precision: 4) if i.object.cost), class: 'sub-number-text-field fnt-cost' } %></td>
      <td><%= i.input :costs, disabled: true, label: false, wrapper: false, as: :string, input_html: { value: (number_with_precision(i.object.costs, precision: 4) if i.object.costs), class: 'sub-number-text-field sub-disabled-field fnt-costs' } %></td>
      <td><%= i.input :price, label: false, wrapper: false, as: :string, input_html: { value: (number_with_precision(i.object.price, precision: 4) if i.object.price), class: 'sub-number-text-field fnt-price' } %></td>
      <td><%= i.input :amount, disabled: true, label: false, wrapper: false, as: :string, input_html: { value: (number_with_precision(i.object.amount, precision: 4) if i.object.amount), class: 'sub-number-text-field sub-disabled-field fnt-amount' } %></td>
      <td style="display:none;"><%= i.input :tax_type_id, label: false, wrapper: false, input_html: { class: 'sub-alfanumeric-text-field fnt-tax-type' } %></td>
      <td><%= i.input :tax, disabled: true, label: false, wrapper: false, as: :string, input_html: { value: (number_with_precision(i.object.tax, precision: 4) if i.object.tax), class: 'sub-number-text-field sub-disabled-field fnt-tax' } %></td>
      <td style="display:none;"><%= i.input :charge_account_id, label: false, wrapper: false, input_html: { class: 'fnt-charge-account' } %></td>
      <% if @breadcrumb == 'create' || @breadcrumb == 'update' %>
      <td><%= link_to_remove_fields('<i class="icon-trash"></i>'.html_safe, i) %></td>
      <% end %>
    </tr>
    <% end %>
  </tbody>
</table>

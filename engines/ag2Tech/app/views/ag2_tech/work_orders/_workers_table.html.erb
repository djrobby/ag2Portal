<script>
  $(document).ready(function() {
    $('.isel2').select2({
      formatNoMatches: function(m) { return '<%= I18n.t("select2.no_matches") %>'; },
      dropdownCssClass: 'shrinked',
      dropdownAutoWidth: true,
      containerCssClass: 'sub-select2-field'
    });

    // Trigger to display totals at table foot
    $('#items-table').bind('totals', function(event) {
      // Sum necessary values from table rows
      var qty = 0;
      var amount = 0;
      var tax = 0;
      $('tr.fields:visible').each(function() {
        qty += parseFloat(right_number($(this).find('input.fnt-quantity').val(), 4));
        amount += parseFloat(right_number($(this).find('input.fnt-amount').val(), 4));
        tax += parseFloat(right_number($(this).find('input.fnt-tax').val(), 4));
      });
      qty = parseInt(right_number(qty.toString(), 4) * 10000);
      amount = parseInt(right_number(amount.toString(), 4) * 10000);
      tax = parseInt(right_number(tax.toString(), 4) * 10000);
      // Bonus
      var discount_p = $('#purchase_order_discount_pct').val();
      if (discount_p == "")
        discount_p = "0";
      discount_p = parseInt(right_number(discount_p, 2) * 100);
      jQuery.getJSON('po_totals/' + qty + '/' + amount + '/' + tax + '/' + discount_p, function(data) {
        document.getElementById('foot-quantity').innerHTML = data.qty;
        document.getElementById('foot-amount').innerHTML = data.amount;
        document.getElementById('foot-tax').innerHTML = data.tax;
        document.getElementById('foot-discount').innerHTML = data.discount;
        document.getElementById('foot-taxable').innerHTML = data.taxable;
        document.getElementById('foot-total').innerHTML = data.total;
      });
    });
    // Update and display totals
    $('#items-table').trigger('totals');
  }); 

  jQuery(function($) {
    // when the .fnt-product field changes
    $(".fnt-product").change(function() {
      // preserve the current object
      var _this = (this);
      // make a POST call and replace the content
      var product = $(this).closest('tr').find('select.fnt-product :selected').val();
      if (product == "")
        product = "0";
      var qty = $(this).closest('tr').find('.fnt-quantity').val();
      if (qty == "")
        qty = "0";
      // Right formatted for passing as REST parameter
      qty = parseInt(right_number(qty, 4) * 10000);
      jQuery.getJSON('po_update_description_prices_from_product/' + product + '/' + qty, function(data) {
        $(_this).closest('tr').find('.fnt-description').val(data.description);
        $(_this).closest('tr').find('.fnt-price').val(data.price);
        $(_this).closest('tr').find('.fnt-amount').val(data.amount);
        $(_this).closest('tr').find('.fnt-tax').val(data.tax);
        $(_this).closest('tr').find(".fnt-tax-type").val(data.type);
        $(_this).closest('tr').find('.fnt-discount-pct').val("0,00");
        $(_this).closest('tr').find('.fnt-discount').val("0,0000");
      });
      return false;
    });

    // when the .fnt-quantity field changes
    $(".fnt-quantity").change(function() {
      // preserve the current object
      var _this = (this);
      recalculate(_this);
      return false;
    });

    // when the .fnt-price field changes
    $(".fnt-price").change(function() {
      // preserve the current object
      var _this = (this);
      recalculate(_this);
      return false;
    });

    // when the .fnt-discount-pct field changes
    $(".fnt-discount-pct").change(function() {
      // preserve the current object
      var _this = (this);
      recalculate(_this);
      return false;
    });

    // when the .fnt-discount field changes
    $(".fnt-discount").change(function() {
      // preserve the current object
      var _this = (this);
      recalculate(_this);
      return false;
    });
    
    // Recalculate amounts & prices
    function recalculate(_this) {
      // make a POST call and replace the content
      var price = $(_this).closest('tr').find('.fnt-price').val();
      if (price == "")
        price = "0";
      var qty = $(_this).closest('tr').find('.fnt-quantity').val();
      if (qty == "")
        qty = "0";
      var tax_type = $(_this).closest('tr').find('.fnt-tax-type').val();
      if (tax_type == "")
        tax_type = "0";
      var discount_p = $(_this).closest('tr').find('.fnt-discount-pct').val();
      if (discount_p == "")
        discount_p = "0";
      var discount = $(_this).closest('tr').find('.fnt-discount').val();
      if (discount == "")
        discount = "0";
      // Right formatted for passing as REST parameter
      price = parseInt(right_number(price, 4) * 10000);
      qty = parseInt(right_number(qty, 4) * 10000);
      discount_p = parseInt(right_number(discount_p, 2) * 100);
      discount = parseInt(right_number(discount, 4) * 10000);
      jQuery.getJSON('po_update_amount_from_price_or_quantity/' + price + '/' + qty + '/' + tax_type + '/' + discount_p + '/' + discount, function(data) {
        $(_this).closest('tr').find('.fnt-price').val(data.price);
        $(_this).closest('tr').find('.fnt-quantity').val(data.quantity);
        $(_this).closest('tr').find('.fnt-amount').val(data.amount);
        $(_this).closest('tr').find('.fnt-tax').val(data.tax);
        $(_this).closest('tr').find('.fnt-discount-pct').val(data.discountp);
        $(_this).closest('tr').find('.fnt-discount').val(data.discount);
        // Update and display totals
        $('#items-table').trigger('totals');
      });
    }

    /*
     * Very special function!
     * This one re-calculate table totals after delete an item
     * When the .icon-trash clicked
     * Replace behavior of link_to_remove_fields
     * (the same was done in nested_po.js)
     */
    $(".icon-trash").click(function() {
      remove_fields(this);
      // Update and display totals
      $('#items-table').trigger('totals');
      return false;
    });
  });
</script>

<table id="workers-table" class="table table-condensed table-striped shrinked fixed">
  <!-- worker -->
  <col width="65%" />
  <!-- hours -->
  <col width="10%" />
  <!-- cost -->
  <col width="10%" />
  <!-- costs -->
  <col width="10%" />
  <!-- button -->
  <col width="5%" />
  <thead>
    <%= render 'workers_header' %>
  </thead>
  <tfoot>
    <%= render 'workers_table_footer', f: f %>
  </tfoot>
  <tbody>
    <%= f.simple_fields_for :work_order_workers, defaults: { input_html: { class: 'sub-form' } } do |i| %>
    <tr class="fields">
      <td><%= i.association :worker, label: false, wrapper: false, collection: Worker.all(order: 'full_name'), input_html: { class: 'isel2 fnt-worker' } %></td>
      <td><%= i.input :hours, label: false, wrapper: false, as: :string, input_html: { value: (number_with_precision(i.object.hours, precision: 4) if i.object.hours), class: 'sub-number-text-field fnt-hours' } %></td>
      <td><%= i.input :cost, label: false, wrapper: false, as: :string, input_html: { value: (number_with_precision(i.object.cost, precision: 4) if i.object.cost), class: 'sub-number-text-field fnt-cost' } %></td>
      <td><%= i.input :costs, disabled: true, label: false, wrapper: false, as: :string, input_html: { value: (number_with_precision(i.object.costs, precision: 4) if i.object.costs), class: 'sub-number-text-field sub-disabled-field fnt-costs' } %></td>
      <% if @breadcrumb == 'create' || @breadcrumb == 'update' %>
      <td><%= link_to_remove_fields('<i class="icon-trash"></i>'.html_safe, i) %></td>
      <% end %>
    </tr>
    <% end %>
  </tbody>
</table>

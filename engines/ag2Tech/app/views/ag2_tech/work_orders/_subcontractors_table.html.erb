<script>
  var _f = '';

  $(document).ready(function() {
    $('.ssel2').select2({
      formatNoMatches: function(m) { return '<%= I18n.t("select2.no_matches") %>'; },
      dropdownCssClass: 'shrinked',
      dropdownAutoWidth: true,
      containerCssClass: 'sub-select2-field'
    });

    // Trigger to display totals at table foot
    $('#subcontractors-table').bind('totals', function(event) {
      // Sum necessary values from table rows
      var pct = 0;
      var costs = 0;
      var count = 0;
      $('#subcontractors-table tr.fields:visible').each(function() {
        pct += parseFloat(right_number($(this).find('input.fnt-enforcement-pct').val(), 2));
        costs += parseFloat(right_number($(this).find('input.fnt-costssub').val(), 4));
        count += 1;
      });
      pct = parseInt(right_number(hours.toString(), 2) * 100);
      costs = parseInt(right_number(costs.toString(), 4) * 10000);
      jQuery.getJSON('wo_subcontractor_totals/' + pct + '/' + costs + '/' + count, function(data) {
        //document.getElementById('foot-pct-avg').innerHTML = data.average;
        document.getElementById('foot-totalsub').innerHTML = data.total;
      });
    });
    // Update and display totals
    $('#subcontractors-table').trigger('totals');
    // Retrieves parent values
    _f = $(".fnt-supplier").closest('form')[0];
  }); 

  jQuery(function($) {
    // when the .fnt-supplier field changes
    $(".fnt-supplier").change(function() {
      // preserve the current object
      var _this = (this);
      // make a POST call and replace the content
      var supplier = $(this).closest('tr').find('select.fnt-supplier :selected').val();
      if (supplier == "")
        supplier = "0";
      var pct = $(this).closest('tr').find('.fnt-enforcement-pct').val();
      if (pct == "")
        pct = "0";
      // Right formatted for passing as REST parameter
      pct = parseInt(right_number(pct, 2) * 100);
      jQuery.getJSON('wo_update_orders_costs_from_supplier/' + supplier + '/' + pct, function(data) {
        $(_this).closest('tr').find('.fnt-costsub').val(data.cost);
        $(_this).closest('tr').find('.fnt-costssub').val(data.costs);
        var p = data.order;
        // Purchase order
        $(_this).closest('tr').find('.fnt-purchase-order').html("");
        $(_this).closest('tr').find('.fnt-purchase-order').select2("val", "");
        $(_this).closest('tr').find('.fnt-purchase-order').append($('<option></option>').val("").html(""));
        if (!p.length) {
          $.each(data, function(id, option) {
            if (id == 'order' && option != "") {
              $(_this).closest('tr').find('.fnt-purchase-order').append($('<option></option>').val(option[0]).html(option[1] + " " + es_date(option[2]) + " " + option[3]));
            }
          });
        } else {
          $.each(p, function(id, option) {
            $(_this).closest('tr').find('.fnt-purchase-order').append($('<option></option>').val(option[0]).html(option[1] + " " + es_date(option[2]) + " " + option[3]));
          });
        }
      });
      return false;
    });

    // when the .fnt-purchase-order field changes
    $(".fnt-purchase-order").change(function() {
      // preserve the current object
      var _this = (this);
      // make a POST call and replace the content
      var order = $(this).closest('tr').find('select.fnt-purchase-order :selected').val();
      if (order == "")
        order = "0";
      var pct = $(this).closest('tr').find('.fnt-enforcement-pct').val();
      if (pct == "")
        pct = "0";
      // Right formatted for passing as REST parameter
      pct = parseInt(right_number(pct, 2) * 100);
      jQuery.getJSON('wo_update_costs_from_purchase_order/' + order + '/' + pct, function(data) {
        $(_this).closest('tr').find('.fnt-costsub').val(data.cost);
        $(_this).closest('tr').find('.fnt-costssub').val(data.costs);
      });
      return false;
    });

    // when the .fnt-enforcement-pct field changes
    $(".fnt-enforcement-pct").change(function() {
      // preserve the current object
      var _this = (this);
      recalculate(_this);
      return false;
    });

    // when the .fnt-costsub field changes
    $(".fnt-costsub").change(function() {
      // preserve the current object
      var _this = (this);
      recalculate(_this);
      return false;
    });
    
    // Recalculate amounts & prices
    function recalculate(_this) {
      // make a POST call and replace the content
      var cost = $(_this).closest('tr').find('.fnt-costsub').val();
      if (cost == "")
        cost = "0";
      var pct = $(_this).closest('tr').find('.fnt-enforcement-pct').val();
      if (pct == "")
        pct = "0";
      // Right formatted for passing as REST parameter
      cost = parseInt(right_number(cost, 4) * 10000);
      pct = parseInt(right_number(hours, 2) * 100);
      jQuery.getJSON('wo_update_costs_from_cost_or_enforcement_pct/' + cost + '/' + pct, function(data) {
        $(_this).closest('tr').find('.fnt-costsub').val(data.cost);
        $(_this).closest('tr').find('.fnt-enforcement-pct').val(data.pct);
        $(_this).closest('tr').find('.fnt-costssub').val(data.costs);
        // Update and display totals
        $('#subcontractors-table').trigger('totals');
      });
    }

    /*
     * Very special function!
     * This one re-calculate table totals after delete an item
     * When the .icon-trash clicked
     * Replace behavior of link_to_remove_fields
     * (the same was done in nested_wo.js)
     */
    $(".icon-trash").click(function() {
      remove_fields(this);
      // Update and display totals
      $('#subcontractors-table').trigger('totals');
    });
  });
</script>

<table id="subcontractors-table" class="table table-condensed table-striped shrinked fixed">
  <!-- supplier -->
  <col width="40%" />
  <!-- purchase_order -->
  <col width="20%" />
  <!-- enforcement_pct -->
  <col width="11%" />
  <!-- cost -->
  <col width="12%" />
  <!-- costs -->
  <col width="12%" />
  <!-- button -->
  <col width="5%" />
  <thead>
    <%= render 'subcontractors_header' %>
  </thead>
  <tfoot>
    <%= render 'subcontractors_table_footer', f: f %>
  </tfoot>
  <tbody>
    <%= f.simple_fields_for :work_order_subcontractors, defaults: { input_html: { class: 'sub-form' } } do |i| %>
    <tr class="fields">
      <td><%= i.association :supplier, label: false, wrapper: false, collection: @suppliers, input_html: { class: 'ssel2 fnt-supplier' } %></td>
      <td><%= i.association :purchase_order, label: false, wrapper: false, collection: @orders, input_html: { class: 'ssel2 fnt-purchase-order' } %></td>
      <td><%= i.input :enforcement_pct, label: false, wrapper: false, as: :string, input_html: { value: (number_with_precision(i.object.enforcement_pct, precision: 2) if i.object.enforcement_pct), class: 'sub-number-text-field fnt-enforcement-pct' } %></td>
      <td><%= i.input :cost, disabled: true, label: false, wrapper: false, as: :string, input_html: { value: (number_with_precision(i.object.cost, precision: 4) if i.object.cost), class: 'sub-number-text-field fnt-costsub' } %></td>
      <td><%= i.input :costs, disabled: true, label: false, wrapper: false, as: :string, input_html: { value: (number_with_precision(i.object.costs, precision: 4) if i.object.costs), class: 'sub-number-text-field sub-disabled-field fnt-costssub' } %></td>
      <% if @breadcrumb == 'create' || @breadcrumb == 'update' %>
      <td><%= link_to_remove_fields('<i class="icon-trash"></i>'.html_safe, i) %></td>
      <% end %>
    </tr>
    <% end %>
  </tbody>
</table>
